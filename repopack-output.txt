================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-09-18T18:55:46.965Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
app/
  (tabs)/
    camera/
      components/
        AnalysisResult.tsx
        ImageCapture.tsx
        PetSelection.tsx
      _layout.tsx
      index.tsx
    dashboard/
      pet-history/
        _layout.tsx
        AllMoodsModal.tsx
        index.tsx
      _layout.tsx
      index.tsx
      modal.tsx
    _layout.tsx
    profile.tsx
    settings.tsx
  _layout.tsx
  +html.tsx
  +not-found.tsx
  index.tsx
assets/
  fonts/
    SpaceMono-Regular.ttf
  icons/
    apple.svg
    billing.svg
    camera.svg
    cat-face.svg
    delete.svg
    google.svg
    logout.svg
    profile.svg
    return.svg
    settings.svg
    share.svg
    view.svg
  iconsSVGJS/
    CameraIcon.js
    HomeIcon.js
    ProfileIcon.js
    SettingsIcon.js
  images/
    android-chrome-192x192.png
    android-chrome-512x512.png
    apple-touch-icon.png
    favicon.ico
    favicon.png
    icon.png
    splash.png
components/
  __tests__/
    __snapshots__/
      ThemedText-test.tsx.snap
    ThemedText-test.tsx
  navigation/
    TabBarIcon.tsx
  Collapsible.tsx
  ExternalLink.tsx
  HelloWave.tsx
  ParallaxScrollView.tsx
  ThemedText.tsx
  ThemedView.tsx
  useColorScheme.tsx
  useColorScheme.web.tsx
constants/
  Colors.ts
hooks/
  useCameraFlow.ts
  useColorScheme.ts
  useColorScheme.web.ts
  useThemeColor.ts
scripts/
  reset-project.js
src/
  api/
    catApi.ts
  store/
    authSlice.ts
    cameraFlowSlice.ts
    hooks.ts
    index.ts
    petSlice.ts
  utils/
    emotionUtils.ts
 tailwind.config.js
.eslintignore
.eslintrc
.gitignore
app.json
babel.config.js
declarations.d.ts
eslint.config.mjs
main.tsx
metro.config.js
package.json
README.md
tailwind.config.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/(tabs)/camera/components/AnalysisResult.tsx
================
import React, { useEffect } from 'react';
import { View, Text, ScrollView, Image, TouchableOpacity } from 'react-native';
import { useAppSelector } from '@/src/store/hooks';
import { useDispatch } from 'react-redux';
import { setStage, setImage, setAnalysisResult, setEmotionDetails } from '@/src/store/cameraFlowSlice';
import { addEmotionRecord } from '@/src/store/petSlice';

export default function AnalysisResult() {
  const dispatch = useDispatch();
  const { image, analysisResult, emotionDetails, analysisTimestamp, selectedPet } = useAppSelector(state => state.cameraFlow);
  const pets = useAppSelector(state => state.pet.pets);
  const handleNewPicture = () => {
    dispatch(setImage(null));
    dispatch(setAnalysisResult(null));
    dispatch(setEmotionDetails(null));
    dispatch(setStage('imageCapture'));
  };

  const formatTimestamp = (timestamp: string) => {
    if (!timestamp) return '';
    const date = new Date(timestamp);
    return date.toLocaleString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    });
  };

  useEffect(() => {
    if (analysisResult && emotionDetails && selectedPet !== null) {
      dispatch(addEmotionRecord({
        index: selectedPet,
        record: {
          image: image,
          emotion: analysisResult.emotion,
          emotionText: emotionDetails.description,
          tipsAndRecs: emotionDetails.tipsAndRecs,
          timestamp: new Date().getTime(),
        }
      }));
    }
  }, [analysisResult, emotionDetails, selectedPet, image, dispatch]);
  
  return (
    <View className="flex-1">
      <ScrollView className="w-full flex-1 p-4 flex gap-2">
        <View className="w-full flex flex-row items-baseline justify-between">
          <Text className="text-white text-2xl font-bold">üìà Analysis</Text>
          {analysisTimestamp && (
            <Text className="text-gray-500 text-sm mt-1">{formatTimestamp(analysisTimestamp)}</Text>
          )}
        </View>
        <Image source={{ uri: image }} className="w-full h-60 rounded-lg mb-5" />
        {analysisResult && (
          analysisResult.emotion.startsWith('ERROR:') ? (
            <Text className="text-white text-xl font-bold mb-3 w-full">
              {analysisResult.emoji} {analysisResult.emotion}
            </Text>
          ) : emotionDetails && (
            <>
              <Text className="text-white text-xl font-bold mb-3 w-full">
                {analysisResult.emoji} {selectedPet !== null && pets[selectedPet] ? pets[selectedPet].name : 'Your pet'} is {analysisResult.emotion}
              </Text>
              <Text className="text-white text-left mb-5 px-4 w-full">{emotionDetails.description}</Text>
              <Text className="text-white text-xl font-bold mb-3 w-full">üêà Tips & Recs</Text>
              {emotionDetails.tipsAndRecs.map((tip, index) => (
                <Text key={index} className="text-white mb-2 px-4 w-full">‚Ä¢ {tip}</Text>
              ))}
            </>
          )
        )}
      </ScrollView>
      <TouchableOpacity 
        className="absolute bottom-8 right-8 bg-[#FBF79C] w-12 h-12 rounded-full items-center justify-center shadow-lg"
        onPress={handleNewPicture}
      >
        <Text className="text-black text-3xl">+</Text>
      </TouchableOpacity>
    </View>
  );
}

================
File: app/(tabs)/camera/components/ImageCapture.tsx
================
import React, { useState } from 'react';
import { View, Text, TouchableOpacity, Image } from 'react-native';
import { useDispatch } from 'react-redux';
import { useAppSelector } from '@/src/store/hooks';
import { setStage, setImage, analyzeImage } from '@/src/store/cameraFlowSlice';
import { RootState } from '@/src/store';
import * as ImagePicker from 'expo-image-picker';
import * as ImageManipulator from 'expo-image-manipulator';

export default function ImageCapture() {
  const dispatch = useDispatch();
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [analyzing, setAnalyzing] = useState(false);
  const selectedPet = useAppSelector((state: RootState) => state.cameraFlow.selectedPet);
  const pets = useAppSelector((state: RootState) => state.pet.pets);

  const compressAndResizeImage = async (uri: string) => {
    const manipulatedImage = await ImageManipulator.manipulateAsync(
      uri,
      [{ resize: { width: 512, height: 512 } }],
      { compress: 0.7, format: ImageManipulator.SaveFormat.JPEG, base64: true }
    );
    return manipulatedImage.base64;
  };

  const handleImageSelection = async (type: 'camera' | 'library') => {
    let result;
    if (type === 'camera') {
      result = await ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 1,
      });
    } else {
      result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 1,
      });
    }
  
    if (!result.canceled) {
      setSelectedImage(result.assets[0].uri);
      setAnalyzing(true);
      dispatch(setImage(result.assets[0].uri));
      const compressedImage = await compressAndResizeImage(result.assets[0].uri);
      dispatch(analyzeImage(compressedImage));
    }
  };

  const handleCancelSelection = () => {
    dispatch(setStage('petSelection'));
  };

  const calculateAge = (birthday) => {
    if (!birthday) return 'Unknown';
    const ageDifMs = Date.now() - new Date(birthday).getTime();
    const ageDate = new Date(ageDifMs);
    return Math.abs(ageDate.getUTCFullYear() - 1970);
  };
  
  const getRecentMood = (pet) => {
    if (pet.emotionHistory.length === 0) return 'No mood data';
    const latestMood = pet.emotionHistory[0];
    const timeDiff = Date.now() - new Date(latestMood.timestamp).getTime();
    const hoursAgo = Math.floor(timeDiff / (1000 * 60 * 60));
    return `${latestMood.emotion} (${hoursAgo} hours ago)`;
  };
  
  
  if (analyzing) {
    return (
      <View className="flex-1 items-center justify-center p-4">
        <Image source={{ uri: selectedImage }} className="w-64 h-64 rounded-lg mb-4" />
        <Text className="text-white text-lg mb-4">Analyzing your cat's emeowtion...</Text>
      </View>
    );
  }

  return (
    <View className="flex-1 items-center justify-between p-4">
      <View className="items-center">
        {selectedPet !== null && pets[selectedPet] && (
          <>
          <Text className="text-white text-xl mb-4">Selected Pet</Text>
          <View 
            className={`p-4 rounded-2xl flex flex-row items-center w-full bg-[#272727] mb-4 w-full`}
          >
            <Image
              source={{ uri: pets[selectedPet].coverPicture || 'https://via.placeholder.com/100' }}
              className="w-32 h-32 rounded-2xl mr-2"
            />
            <View>
              <Text className="font-bold text-lg text-white">{pets[selectedPet].name}</Text>
              <Text className="text-white">Age: {calculateAge(pets[selectedPet].birthday)}</Text>
              <Text className="text-white">Breed: {pets[selectedPet].breed || 'Unknown'}</Text>
              <Text className="text-white">Recent mood: {getRecentMood(pets[selectedPet])}</Text>
            </View>
          </View>
          </>
        )}
        <TouchableOpacity 
          className="bg-[#FBF79C] py-3 px-5 rounded-lg mb-4"
          onPress={() => handleImageSelection('camera')}
        >
          <Text className="text-black font-bold">Take a picture</Text>
        </TouchableOpacity>
        <Text className="text-white mb-4">OR</Text>
        <TouchableOpacity 
          className="bg-[#FBF79C] py-3 px-5 rounded-lg"
          onPress={() => handleImageSelection('library')}
        >
          <Text className="text-black font-bold">Choose from library</Text>
        </TouchableOpacity>
      </View>
      
      <TouchableOpacity 
        className="border border-[#FBF79C] py-4 rounded-2xl w-full"
        onPress={handleCancelSelection}
      >
        <Text className="text-[#FBF79C] font-bold text-center">Cancel</Text>
      </TouchableOpacity>
    </View>
  );
}

================
File: app/(tabs)/camera/components/PetSelection.tsx
================
import React from 'react';
import { View, Text, ScrollView, TouchableOpacity, Image } from 'react-native';
import { useDispatch } from 'react-redux';
import { useAppSelector } from '@/src/store/hooks';
import { RootState } from '@/src/store';
import { setSelectedPet, setStage } from '@/src/store/cameraFlowSlice';

export default function PetSelection() {
  const dispatch = useDispatch();
  const pets = useAppSelector((state: RootState) => state.pet.pets);
  const selectedPet = useAppSelector((state: RootState) => state.cameraFlow.selectedPet);

  const handleSelectPet = (index: number) => {
    dispatch(setSelectedPet(index));
  };

  const handleContinue = () => {
    dispatch(setStage('imageCapture'));
  };

    const getRecentMood = (pet) => {
    if (pet.emotionHistory.length === 0) return 'No mood data';
    const latestMood = emotionHistory[0];
    const timeDiff = Date.now() - new Date(latestMood.timestamp).getTime();
    const hoursAgo = Math.floor(timeDiff / (1000 * 60 * 60));
    return `${latestMood.emotion} (${hoursAgo} hours ago)`;
  };

  const calculateAge = (birthday) => {
    if (!birthday) return 'Unknown';
    const ageDifMs = Date.now() - new Date(birthday).getTime();
    const ageDate = new Date(ageDifMs);
    return Math.abs(ageDate.getUTCFullYear() - 1970);
  };


  return (
    <View className="p-4 rounded-2xl mb-4 w-full flex-grow">
      <Text className="text-white text-lg mb-2 text-center">Select a pet to continue</Text>
      <ScrollView>
        <View className="flex-row flex-wrap px-2">
          {pets.map((item, index) => (
            <TouchableOpacity 
              key={index}
              className={`p-2 rounded-2xl m-1 flex flex-row items-center w-full ${selectedPet === index ? 'bg-[#FFFC9F]' : 'bg-[#272727]'}`}
              onPress={() => handleSelectPet(index)}
            >
              <Image
                source={{ uri: item.coverPicture || 'https://via.placeholder.com/100' }}
                className="w-32 h-32 rounded-2xl mr-2"
              />
              <View>
                <Text className={`font-bold text-lg ${selectedPet === index ? 'text-black' : 'text-white'}`}>{item.name}</Text>
                <Text className={`${selectedPet === index ? 'text-black' : 'text-white'}`}>Age: {calculateAge(item.birthday)}</Text>
                <Text className={`${selectedPet === index ? 'text-black' : 'text-white'}`}>Breed: {item.breed || 'Unknown'}</Text>
                <Text className={`${selectedPet === index ? 'text-black' : 'text-white'}`}>Recent mood: {getRecentMood(item)}</Text>
              </View>
            </TouchableOpacity>
            ))}
        </View>
      </ScrollView>
      {selectedPet !== null && (
        <TouchableOpacity 
          className="bg-[#FBF79C] py-4 rounded-2xl mt-4 self-center w-full absolute bottom-0"
          onPress={handleContinue}
        >
          <Text className="text-black font-bold text-center">Continue</Text>
        </TouchableOpacity>
      )}
    </View>
  );
}

================
File: app/(tabs)/camera/_layout.tsx
================
import { Stack } from 'expo-router';

export default function DashboardLayout() {
  return (
    <Stack>
      <Stack.Screen name="index" options={{ headerShown: false }} />
    </Stack>
  );
}

================
File: app/(tabs)/camera/index.tsx
================
import React from 'react';
import { SafeAreaView, View, Text, TouchableOpacity, ActivityIndicator } from 'react-native';
import { useAppSelector } from '@/src/store/hooks';
import { RootState } from '@/src/store';
import PetSelection from './components/PetSelection';
import ImageCapture from './components/ImageCapture';
import AnalysisResult from './components/AnalysisResult';

export default function Camera() {
  const { stage } = useAppSelector((state: RootState) => state.cameraFlow);
  const userName = useAppSelector((state: RootState) => state.auth.user?.name || '');

  if (!stage) {
    return (
      <SafeAreaView className="flex-1 flex flex-row bg-[#060606] justify-center items-center">
        <ActivityIndicator size="large" color="#FFFC9F" />
        <Text className="text-white mt-4">Loading...</Text>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView className="flex-1 bg-[#060606]">
      <View className="flex-row justify-between items-center p-4">
        <Text className="text-white text-lg">üëã Hi {userName}!</Text>
        <TouchableOpacity className="bg-[#FFFC9F] w-10 h-10 rounded-full items-center justify-center">
          <Text className="text-black font-bold">ST</Text>
        </TouchableOpacity>
      </View>
      
      <View className="flex-1 justify-center">
        {stage === 'petSelection' && <PetSelection />}
        {stage === 'imageCapture' && <ImageCapture />}
        {stage === 'analysisResult' && <AnalysisResult />}
      </View>
    </SafeAreaView>
  );
}

================
File: app/(tabs)/dashboard/pet-history/_layout.tsx
================
import { Stack } from 'expo-router';

export default function PetHistoryLayout() {
  return (
    <Stack>
      <Stack.Screen name="index" options={{ headerShown: false }} />
    </Stack>
  );
}

================
File: app/(tabs)/dashboard/pet-history/AllMoodsModal.tsx
================
import React from 'react';
import { View, Text, ScrollView, TouchableOpacity, Modal } from 'react-native';
interface AllMoodsModalProps {
  visible: boolean;
  onClose: () => void;
  moods: [string, number][];
}

const AllMoodsModal: React.FC<AllMoodsModalProps> = ({ visible, onClose, moods }) => {

  const emotionColorMap = {
    "Content": "#FFE0CC", "Happy": "#FFDCE2", "Curious": "#D5F5C4", "Affectionate": "#D7FAFE",
    "Scared": "#FFE8D6", "Aggressive": "#FFD6D6", "Annoyed": "#F0E6FF", "Anxious": "#E6F9FF",
    "Sad": "#E6E6FF", "Bored": "#FFF0E6", "Sleepy": "#E6FFE6"
  };


  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="slide"
    >
      <View className="flex-1 justify-center items-center bg-black bg-opacity-50">
        <View className="bg-[#1D1D1D] p-4 rounded-2xl w-[90%] max-h-[80%]">
          <Text className="text-white text-xl font-bold mb-4">All Moods</Text>
          <ScrollView>
          {moods.map(([mood, count]) => (
            <View key={mood} className="flex-row items-center mb-4">
              <View 
                style={{
                  width: `${(count / Math.max(...moods.map(([, c]) => c))) * 100}%`,
                  height: 30,
                  backgroundColor: emotionColorMap[mood] || '#1D1D1D',
                  borderRadius: 5,
                  justifyContent: 'center',
                  paddingLeft: 8,
                }}
              >
                <Text className="text-black font-bold">{`${mood} (${count})`}</Text>
              </View>
            </View>
          ))}
          </ScrollView>
          <TouchableOpacity 
            className="bg-[#FFFC9F] py-2 px-4 rounded-lg mt-4"
            onPress={onClose}
          >
            <Text className="text-black font-bold text-center">Close</Text>
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
  );
};

export default AllMoodsModal;

================
File: app/(tabs)/dashboard/pet-history/index.tsx
================
import React, { useState } from 'react';
import { SafeAreaView, View, Text, ScrollView, Image, TouchableOpacity } from 'react-native';
import { useLocalSearchParams } from 'expo-router';
import { useAppSelector } from '@/src/store/hooks';
import AllMoodsModal from './AllMoodsModal';

const PetHistory = () => {
  const { index } = useLocalSearchParams();
  const pets = useAppSelector((state) => state.pet.pets);
  const pet = pets[Number(index)];
  const emotionHistory = pet?.emotionHistory || [];
  const [showAllMoods, setShowAllMoods] = useState(false);

  const calculateAge = (birthday) => {
    if (!birthday) return 'Unknown';
    const ageDifMs = Date.now() - new Date(birthday).getTime();
    const ageDate = new Date(ageDifMs);
    return Math.abs(ageDate.getUTCFullYear() - 1970);
  };

  const getRecentMood = () => {
    if (emotionHistory.length === 0) return 'No mood data';
    const latestMood = emotionHistory[0];
    const timeDiff = Date.now() - new Date(latestMood.timestamp).getTime();
    const hoursAgo = Math.floor(timeDiff / (1000 * 60 * 60));
    return `${latestMood.emotion} (${hoursAgo} hours ago)`;
  };

  const getTopMoods = () => {
    const moodCounts = emotionHistory.reduce((acc, record) => {
      acc[record.emotion] = (acc[record.emotion] || 0) + 1;
      return acc;
    }, {});
    return Object.entries(moodCounts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 4);
  };

  const emotionEmojiMap = {
    "Content": "üò∫", "Happy": "üò∏", "Curious": "üê±", "Affectionate": "üòΩ",
    "Scared": "üôÄ", "Aggressive": "üòæ", "Annoyed": "üòº", "Anxious": "üòø",
    "Sad": "üòø", "Bored": "üêà", "Sleepy": "üò¥"
  };

  const emotionColorMap = {
    "Content": "#FFE0CC", "Happy": "#FFDCE2", "Curious": "#D5F5C4", "Affectionate": "#D7FAFE",
    "Scared": "#FFE8D6", "Aggressive": "#FFD6D6", "Annoyed": "#F0E6FF", "Anxious": "#E6F9FF",
    "Sad": "#E6E6FF", "Bored": "#FFF0E6", "Sleepy": "#E6FFE6"
  };

  if (!pet) {
    return (
      <View className="flex-1 justify-center items-center bg-[#060606]">
        <Text className="text-white text-lg">Pet not found</Text>
      </View>
    );
  }

  return (
    <SafeAreaView className="flex-1 bg-[#060606]">
      <View className="flex-row justify-between items-center p-4">
        <Text className="text-white text-lg">üëã Hi {'Syed'}!</Text>
        <TouchableOpacity className="bg-[#FFFC9F] w-10 h-10 rounded-full items-center justify-center">
          <Text className="text-black font-bold">ST</Text>
        </TouchableOpacity>
      </View>

      <ScrollView className="flex-1 px-4">
        <View className="flex-row my-4 bg-[#1D1D1D] p-4 rounded-2xl">
          <Image 
            source={{ uri: pet.coverPicture || 'https://placekitten.com/200/200' }} 
            className="w-20 h-20 rounded-2xl mr-4"
          />
          <View>
            <Text className="text-white text-xl font-bold">{pet.name}</Text>
            <Text className="text-white">Age: {calculateAge(pet.birthday)}</Text>
            <Text className="text-white">Breed: {pet.breed || 'Unknown'}</Text>
            <Text className="text-white">Recent mood: {getRecentMood()}</Text>
          </View>
        </View>

        <Text className="text-white text-xl font-bold mt-6 mb-2">Mood History</Text>
        {emotionHistory.length > 0 ? (
          <View className="border-l-2 border-white p-4">
              {getTopMoods().slice(0, 3).map(([mood, count], index) => (
                <View key={mood} className="flex-row items-center mb-4">
                  <View 
                    style={{
                      width: `${(count / Math.max(...getTopMoods().map(([, c]) => c))) * 100}%`,
                      height: 30,
                      backgroundColor: emotionColorMap[mood] || '#1D1D1D',
                      borderRadius: 5,
                      justifyContent: 'center',
                      paddingLeft: 8,
                    }}
                  >
                    <Text className="text-black font-bold">{`${mood} (${count})`}</Text>
                  </View>
                </View>
              ))}
            {getTopMoods().length > 3 && (
              <TouchableOpacity 
                className="bg-[#D7FAFE] py-2 px-4 rounded-lg mt-2"
                onPress={() => setShowAllMoods(true)}
              >
                <Text className="text-black font-bold text-center">See More</Text>
              </TouchableOpacity>
            )}
          </View>
        ) : (
          <Text className="text-white">
            {`No mood history available. Navigate to the Camera tab to start tracking your pet's moods!`}
          </Text>
        )}

      <Text className="text-white text-xl font-bold mt-6 mb-2">Mood Details</Text>
      {emotionHistory.length > 0 ? (
        <View className="flex-row flex-wrap justify-between">
        {Object.entries(emotionEmojiMap).map(([emotion, emoji]) => {
          const count = emotionHistory.filter(record => record.emotion === emotion).length;
          if (count === 0) return null;
          const latestImage = emotionHistory.find(record => record.emotion === emotion)?.image;
          return (
            <View 
              key={emotion} 
              className="w-[48%] rounded-lg p-2 mb-4"
              style={{ backgroundColor: emotionColorMap[emotion] || '#1D1D1D' }}
            >
              <Image 
                source={{ uri: latestImage || 'https://placekitten.com/100/100' }} 
                className="w-full h-24 rounded-lg mb-2"
              />
              <Text className="text-black font-bold">{emoji} {emotion} ({count})</Text>
            </View>
          );
        })}
      </View>
      ) : (
        <Text className="text-white">
       {` No mood details available. Use the Camera tab to capture and analyze your pet's emotions!`}
      </Text>
      )}
      </ScrollView>
      <AllMoodsModal
        visible={showAllMoods}
        onClose={() => setShowAllMoods(false)}
        moods={getTopMoods()}
      />
    </SafeAreaView>
  );
};

export default PetHistory;

================
File: app/(tabs)/dashboard/_layout.tsx
================
import { Stack } from 'expo-router';

export default function DashboardLayout() {
  return (
    <Stack>
      <Stack.Screen name="index" options={{ headerShown: false }} />
    </Stack>
  );
}

================
File: app/(tabs)/dashboard/index.tsx
================
import React, { useState } from 'react';
import { SafeAreaView, View, Text, TouchableOpacity, ScrollView, Image } from 'react-native';
import { Link } from 'expo-router';
import { useAppSelector } from '@/src/store/hooks';
import ModalScreen from './modal';

const Dashboard = () => {
  const pets = useAppSelector((state) => state.pet.pets);
  const [isModalVisible, setIsModalVisible] = useState(false);

  const calculateAge = (birthday) => {
    if (!birthday) return 'Unknown';
    const ageDifMs = Date.now() - new Date(birthday).getTime();
    const ageDate = new Date(ageDifMs);
    return Math.abs(ageDate.getUTCFullYear() - 1970);
  };

  const getRecentMood = (pet) => {
    if (!pet.emotionHistory || pet.emotionHistory.length === 0) return 'No mood data';
    const latestMood = pet.emotionHistory[0];
    const timeDiff = Date.now() - new Date(latestMood.timestamp).getTime();
    const hoursAgo = Math.floor(timeDiff / (1000 * 60 * 60));
    return `${latestMood.emotion} (${hoursAgo} hours ago)`;
  };

  return (
    <SafeAreaView className="flex-1 bg-[#060606]">

      <View className="flex-row justify-between items-center p-4">
        <Text className="text-white text-lg">üëã Hi {'There'}!</Text>
        <TouchableOpacity className="bg-[#FFFC9F] w-10 h-10 rounded-full items-center justify-center">
          <Text className="text-black font-bold">ST</Text>
        </TouchableOpacity>
      </View>

      <ScrollView className="flex-1 px-4">
        <Text className="text-white text-2xl font-bold my-4">Dashboard</Text>
        <View className="mb-6">
          <View className="flex-row justify-between items-center mb-2">
            <Text className="text-white text-lg">üêà Your Pets</Text>
            <TouchableOpacity
              onPress={() => setIsModalVisible(true)}
              className="border border-[#FFFC9F] rounded-xl px-2 py-1 active:opacity-90"
            >
              <Text className="text-[#FFFC9F]">+ Add a pet</Text>
            </TouchableOpacity>
          </View>
          {pets.length === 0 ? (
            <Text className="text-white text-center mt-4">
              Add a pet using the add pet button to get started!
            </Text>
          ) : (
            pets.map((pet, index) => (
              <Link key={index} href={`/dashboard/pet-history?index=${index}`} asChild>
                <TouchableOpacity className="flex-row my-4 bg-[#1D1D1D] p-4 rounded-2xl">
                  <Image 
                    source={{ uri: pet.coverPicture || 'https://placekitten.com/200/200' }} 
                    className="w-20 h-20 rounded-2xl mr-4"
                  />
                  <View>
                    <Text className="text-white text-xl font-bold">{pet.name}</Text>
                    <Text className="text-white">Age: {calculateAge(pet.birthday)}</Text>
                    <Text className="text-white">Breed: {pet.breed || 'Unknown'}</Text>
                    <Text className="text-white">Recent mood: {getRecentMood(pet)}</Text>
                  </View>
                </TouchableOpacity>
              </Link>
            ))
          )}
        </View>
      </ScrollView>
      {isModalVisible && (
        <ModalScreen
          visible={isModalVisible}
          onClose={() => setIsModalVisible(false)}
        />
      )}
    </SafeAreaView>
  );
};

export default Dashboard;

================
File: app/(tabs)/dashboard/modal.tsx
================
import React, { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, Platform, Image, TouchableWithoutFeedback, KeyboardAvoidingView } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import DateTimePicker from '@react-native-community/datetimepicker';
import * as ImagePicker from 'expo-image-picker';
import { useAppDispatch } from '@/src/store/hooks';
import { addPet } from '@/src/store/petSlice';
import { Modal as RNModal } from 'react-native';

export default function ModalScreen({ visible, onClose }) {
  const dispatch = useAppDispatch();
  const [modalVisible, setModalVisible] = useState(visible);
  const [name, setName] = useState('');
  const [birthday, setBirthday] = useState(new Date());
  const [breed, setBreed] = useState('');
  const [image, setImage] = useState(null);
  const [showDatePicker, setShowDatePicker] = useState(false);

  const handleDateChange = (event, selectedDate) => {
    const currentDate = selectedDate || birthday;
    setBirthday(currentDate);
  };

  const pickImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  const handleSave = () => {
    if (!image) {
      alert("Please provide a pet picture.");
      return;
    }
    if (!name.trim()) {
      alert("Please provide a pet name.");
      return;
    }
    
    const newPet = {
      coverPicture: image,
      name: name.trim(),
      birthday: birthday.toISOString(),
      breed: breed.trim() || null,
      emotionHistory: [],
    };
    dispatch(addPet(newPet));
    onClose();
  };
  

  return (
    <RNModal
      animationType="slide"
      transparent={true}
      visible={modalVisible}
      onRequestClose={() => {
        setModalVisible(false);
        onClose();
      }}
    >
      <TouchableOpacity
        style={{ flex: 1, backgroundColor: 'rgba(0,0,0,0.5)' }}
        activeOpacity={1}
        onPress={() => onClose()}
      >
        <KeyboardAvoidingView
          className="flex-1"
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 20}
        >
          <TouchableWithoutFeedback>
            <View className="bg-[#1D1D1D] rounded-t-3xl p-6 pb-10 mt-auto">
              <Text className="text-white text-2xl font-bold mb-2">üêà Pet Info</Text>
              <Text className="text-white text-lg mb-6">{`Let's get your pet profile setup`}</Text>

              {image ? (
                <>
                  <TouchableOpacity className="border border-[#FFFC9F] rounded-2xl py-1 mb-2" onPress={pickImage}>
                    <Text className="text-[#FFFC9F] py-1 w-full text-center ">Edit picture</Text>
                  </TouchableOpacity>
                  <Image source={{ uri: image }} className="w-full h-60 rounded-lg mb-4" />
                </>
              ) : (
                <TouchableOpacity className="text-white p-4 rounded-2xl mb-4 focus:border bg-[#272727] focus:border-[#FFFC9F] items-center" onPress={pickImage}>
                  <Text className="text-white">+ Add Pet Picture (Required)</Text>
                </TouchableOpacity>
              )}

              <TextInput
                className="text-white p-4 rounded-2xl mb-4 focus:border bg-[#272727] focus:border-[#FFFC9F]"
                placeholder="Pet Name"
                placeholderTextColor="#999"
                value={name}
                onChangeText={setName}
              />

              <TouchableOpacity
                className="text-white p-4 rounded-2xl mb-4 focus:border bg-[#272727] focus:border-[#FFFC9F]"
                onPress={() => setShowDatePicker(!showDatePicker)}
              >
                <Text className="text-white ">{birthday.toDateString()}</Text>
                {showDatePicker && (
                  <DateTimePicker
                    value={birthday}
                    mode="date"
                    display="spinner"
                    onChange={handleDateChange}
                    textColor="#FFFFFF"
                    style={{ backgroundColor: '#1D1D1D' }}
                  />
                )}
              </TouchableOpacity>

              <View className="flex-row items-center mb-4 bg-[#272727] rounded-2xl">
                <TextInput
                  className="text-white p-4 flex-grow"
                  placeholder="Breed"
                  placeholderTextColor="#999"
                  value={breed}
                  onChangeText={setBreed}
                />
                <TouchableOpacity
                  className="p-2 rounded-xl bg-[#313131] mr-2"
                  onPress={() => alert("If you don't enter a breed, we can detect a breed based on the picture provided.")}
                >
                  <Text className="text-[#FFFC9F] font-bold text-md">i</Text>
                </TouchableOpacity>
              </View>

              <View className="flex flex-row">
                <TouchableOpacity
                  className="bg-[#FFFC9F] p-4 rounded-2xl flex-grow mr-2"
                  onPress={handleSave}
                >
                  <Text className="text-black text-center font-bold">Save</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  className="border border-[#FFFC9F] p-4 rounded-2xl"
                  onPress={() => onClose()}
                >
                  <Text className="text-white text-center">Cancel</Text>
                </TouchableOpacity>
              </View>

              <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />
            </View>
          </TouchableWithoutFeedback>
        </KeyboardAvoidingView>
      </TouchableOpacity>
    </RNModal>
  );
}

================
File: app/(tabs)/_layout.tsx
================
import React from 'react';
import { Tabs } from 'expo-router';
import HomeIcon from '@assets/iconsSVGJS/HomeIcon';
import CameraIcon from '@assets/iconsSVGJS/CameraIcon';
import ProfileIcon from '@assets/iconsSVGJS/ProfileIcon';
import SettingsIcon from '@assets/iconsSVGJS/SettingsIcon';

export default function TabLayout() {


  return (
        <Tabs
            initialRouteName="dashboard"
            screenOptions={({ route }) => ({
                tabBarStyle: { 
                    paddingTop: 8, 
                    borderRadius: 24,
                    backgroundColor: '#1D1D1D',
                },
                headerShown: false,
                tabBarShowLabel: false,
                tabBarItemStyle: {
                    padding: 12,
                    marginHorizontal: 24,
                    borderRadius: 20,
                    width: 'auto',
                },
                tabBarActiveBackgroundColor: '#FBF79C',
            })}
        >
            <Tabs.Screen
                name="dashboard"
                options={{
                    tabBarIcon: ({ focused, color, size }) => (
                        <HomeIcon width={size} height={size} fill={focused ? `#FBF79C`: `#1D1D1D` } stroke={focused ? '#000000' : '#FFFFFF'} />
                    ),
                }}
            />
            <Tabs.Screen
                name="camera"
                options={{
                tabBarIcon: ({ focused, color, size }) => (
                    <CameraIcon width={size} height={size} fill={focused ? `#FBF79C`: `#1D1D1D` } stroke={focused ? '#000000' : '#FFFFFF'} />
                ),
                }}
            />
            <Tabs.Screen
                name="profile"
                options={{
                    tabBarIcon: ({ focused, color, size }) => (
                        <ProfileIcon width={size} height={size} fill={focused ? `#FBF79C`: `#1D1D1D` } stroke={focused ? '#000000' : '#FFFFFF'} />
                    ),
                }}
            />
            <Tabs.Screen
                name="settings"
                options={{
                tabBarIcon: ({ focused, color, size }) => (
                    <SettingsIcon width={size} height={size} fill={focused ? `#FBF79C`: `#1D1D1D` } stroke={focused ? '#000000' : '#FFFFFF'} />
                ),
                }}
            />
        </Tabs>
  );
}

================
File: app/(tabs)/profile.tsx
================
import React from 'react';
import { View, Text } from 'react-native';

export default function Profile() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Profile Screen</Text>
    </View>
  );
}

================
File: app/(tabs)/settings.tsx
================
import React from 'react';
import { View, Text } from 'react-native';

export default function Settings() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Settings Screen</Text>
    </View>
  );
}

================
File: app/_layout.tsx
================
import React, { useEffect } from 'react';
import { DarkTheme, DefaultTheme, ThemeProvider } from '@react-navigation/native';
import { useFonts } from 'expo-font';
import { Stack } from 'expo-router';
import * as SplashScreen from 'expo-splash-screen';
import 'react-native-reanimated';
import { Provider } from 'react-redux';
import store from '@/src/store';
import { SafeAreaProvider } from 'react-native-safe-area-context';

import { useColorScheme } from '@/components/useColorScheme';

export {
  // Catch any errors thrown by the Layout component.
  ErrorBoundary,
} from 'expo-router';

export const unstable_settings = {
  // Ensure that reloading on `/modal` keeps a back button present.
  initialRouteName: 'index',
};

// Prevent the splash screen from auto-hiding before asset loading is complete.
SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
  const [loaded, error] = useFonts({
    SpaceMono: require('../assets/fonts/SpaceMono-Regular.ttf')
  });

  // Expo Router uses Error Boundaries to catch errors in the navigation tree.
  useEffect(() => {
    if (error) throw error;
  }, [error]);

  useEffect(() => {
    if (loaded) {
      SplashScreen.hideAsync();
    }
  }, [loaded]);

  if (!loaded) {
    return null;
  }

  return <RootLayoutNav />;
}

if (process.env.NODE_ENV !== 'development') {
  console.log = () => {};
}


function RootLayoutNav() {

  const colorScheme = useColorScheme();

  return (
    <Provider store={store}>
      <SafeAreaProvider>
        <ThemeProvider value={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>
          <Stack 
            screenOptions={{
              headerShown: false,
            }}
          >
          <Stack.Screen name="index" options={{ headerShown: false }} />
          <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
      </Stack>
        </ThemeProvider>
      </SafeAreaProvider>
    </Provider>
  );
}

================
File: app/+html.tsx
================
import { ScrollViewStyleReset } from 'expo-router/html';
import { type PropsWithChildren } from 'react';

/**
 * This file is web-only and used to configure the root HTML for every web page during static rendering.
 * The contents of this function only run in Node.js environments and do not have access to the DOM or browser APIs.
 */
export default function Root({ children }: PropsWithChildren) {
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />

        {/*
          Disable body scrolling on web. This makes ScrollView components work closer to how they do on native.
          However, body scrolling is often nice to have for mobile web. If you want to enable it, remove this line.
        */}
        <ScrollViewStyleReset />

        {/* Using raw CSS styles as an escape-hatch to ensure the background color never flickers in dark-mode. */}
        <style dangerouslySetInnerHTML={{ __html: responsiveBackground }} />
        {/* Add any additional <head> elements that you want globally available on web... */}
      </head>
      <body>{children}</body>
    </html>
  );
}

const responsiveBackground = `
body {
  background-color: #fff;
}
@media (prefers-color-scheme: dark) {
  body {
    background-color: #000;
  }
}`;

================
File: app/+not-found.tsx
================
import { Link, Stack } from 'expo-router';
import { StyleSheet } from 'react-native';

import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';

export default function NotFoundScreen() {
  return (
    <>
      <Stack.Screen options={{ title: 'Oops!' }} />
      <ThemedView style={styles.container}>
        <ThemedText type="title">This screen doesn't exist.</ThemedText>
        <Link href="/" style={styles.link}>
          <ThemedText type="link">Go to home screen!</ThemedText>
        </Link>
      </ThemedView>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  link: {
    marginTop: 15,
    paddingVertical: 15,
  },
});

================
File: app/index.tsx
================
import React, { useState } from 'react';
import { Text, View, TouchableOpacity, TextInput, KeyboardAvoidingView, Platform, Keyboard, TouchableWithoutFeedback, ScrollView, SafeAreaView } from 'react-native';
import { Link } from 'expo-router';
import { useAppDispatch } from '@/src/store/hooks';

import GoogleIcon from '@assets/icons/google.svg';
import AppleIcon from '@assets/icons/apple.svg';
import CatFace from '@assets/icons/cat-face.svg';

const index = () => {
  const [isFocused, setIsFocused] = useState(false);
  const [email, setEmail] = useState('');
  const dispatch = useAppDispatch();
  const isEmailValid = email.trim().length > 0;

  const handleLogin = () => {
    dispatch(login('user@example.com'));
    // Navigate to dashboard or perform other actions
  };

  return (
    <SafeAreaView className="flex-1 bg-[#060606]">
      <KeyboardAvoidingView
        className="flex-1"
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 20}
      >
        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
          <View className="flex-1">
            <ScrollView 
              contentContainerStyle={{ flexGrow: 1 }}
              keyboardShouldPersistTaps="handled"
            >
              <View className="flex-1 justify-center items-center p-4">
                <View className="flex-row items-center gap-2 mb-8">
                  <View className={`bg-[#FFFC9F] py-6 px-2 rounded-2xl`}>
                    <CatFace width={66} height={30} />
                  </View>
                  <Text className="text-white text-3xl font-bold">EmotiCat</Text>
                </View>

                <View className="w-full max-w-sm">
                  <TouchableOpacity className="bg-[#383838] flex-row items-center justify-center p-4 rounded-2xl mb-4">
                    <GoogleIcon width={24} height={24} />
                    <Text className="text-white ml-2">Continue with Google</Text>
                  </TouchableOpacity>

                  <TouchableOpacity className="bg-[#383838] flex-row items-center justify-center p-4 rounded-2xl mb-4">
                    <AppleIcon width={24} height={24} />
                    <Text className="text-white ml-2">Continue with Apple</Text>
                  </TouchableOpacity>

                  <Text className="text-white text-center my-4">OR</Text>

                  <View>
                    <TextInput 
                      className={`bg-[#383838] text-white p-4 rounded-2xl mb-4 ${
                        isFocused ? 'border-[#FBF79C] border-2' : 'border-transparent border-2'
                      }`}
                      placeholder="Enter your email address"
                      placeholderTextColor="#8D8D8D"
                      onFocus={() => setIsFocused(true)}
                      onBlur={() => setIsFocused(false)}
                      onChangeText={setEmail}
                      value={email}
                    />

                    {isEmailValid ? (
                      <Link href='/dashboard' asChild replace>
                        <TouchableOpacity className="bg-[#FBF79C] p-4 rounded-2xl">
                          <Text className="text-black text-center">Continue with Email</Text>
                        </TouchableOpacity>
                      </Link>
                    ) : (
                      <View className="bg-[#1C1C1C] p-4 rounded-2xl">
                        <Text className="text-[#8D8D8D] text-center">Continue with Email</Text>
                      </View>
                    )}
                  </View>
                </View>
              </View>
            </ScrollView>
            
            <View className="p-4 pb-6">
              <Text className="text-[#8D8D8D] text-center text-xs">
                By using EmotiCat, you are agreeing to comply with our Privacy, Terms, and Usage Policies
              </Text>
            </View>
          </View>
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};


export default index;

================
File: assets/icons/apple.svg
================
<svg width="20" height="24" viewBox="0 0 20 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M19.2807 18.424C18.9329 19.2275 18.5211 19.9672 18.0441 20.6472C17.3939 21.5743 16.8615 22.216 16.4512 22.5724C15.8152 23.1573 15.1337 23.4568 14.404 23.4739C13.8801 23.4739 13.2483 23.3248 12.5129 23.0224C11.7751 22.7214 11.097 22.5724 10.4771 22.5724C9.82683 22.5724 9.12947 22.7214 8.38355 23.0224C7.6365 23.3248 7.03469 23.4824 6.57456 23.498C5.87478 23.5278 5.17728 23.2198 4.48105 22.5724C4.03669 22.1848 3.48087 21.5204 2.81503 20.5791C2.10063 19.5739 1.51329 18.4084 1.05317 17.0795C0.560384 15.6442 0.313354 14.2543 0.313354 12.9087C0.313354 11.3673 0.646419 10.0379 1.31354 8.92385C1.83784 8.02901 2.53534 7.32313 3.40832 6.80494C4.2813 6.28674 5.22456 6.02268 6.24036 6.00578C6.79618 6.00578 7.52506 6.17771 8.43083 6.5156C9.33405 6.85463 9.914 7.02655 10.1683 7.02655C10.3584 7.02655 11.0026 6.82552 12.0948 6.42474C13.1277 6.05306 13.9994 5.89916 14.7135 5.95978C16.6485 6.11595 18.1023 6.87876 19.0691 8.25304C17.3385 9.30164 16.4824 10.7703 16.4995 12.6544C16.5151 14.122 17.0475 15.3432 18.0938 16.3129C18.568 16.7629 19.0975 17.1107 19.6867 17.3578C19.5589 17.7283 19.4241 18.0832 19.2807 18.424ZM14.8427 0.960138C14.8427 2.1104 14.4224 3.1844 13.5848 4.17848C12.574 5.36024 11.3513 6.04312 10.0254 5.93537C10.0086 5.79737 9.99876 5.65213 9.99876 5.49952C9.99876 4.39527 10.4795 3.2135 11.3331 2.24725C11.7593 1.75801 12.3014 1.35123 12.9587 1.02672C13.6146 0.70706 14.235 0.53028 14.8185 0.500008C14.8356 0.65378 14.8427 0.807561 14.8427 0.960123V0.960138Z" fill="white"/>
</svg>

================
File: assets/icons/billing.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<g id="invoice">
<path id="Vector" d="M20.016 2C18.9026 2 18 4.68629 18 8H20.016C20.9876 8 21.4734 8 21.7741 7.66455C22.0749 7.32909 22.0225 6.88733 21.9178 6.00381C21.6414 3.67143 20.8943 2 20.016 2Z" stroke="white" stroke-width="1.5"/>
<path id="Vector_2" d="M18 8.05426V18.6458C18 20.1575 18 20.9133 17.538 21.2108C16.7831 21.6971 15.6161 20.6774 15.0291 20.3073C14.5441 20.0014 14.3017 19.8485 14.0325 19.8397C13.7417 19.8301 13.4949 19.9768 12.9709 20.3073L11.06 21.5124C10.5445 21.8374 10.2868 22 10 22C9.71321 22 9.45546 21.8374 8.94 21.5124L7.02913 20.3073C6.54415 20.0014 6.30166 19.8485 6.03253 19.8397C5.74172 19.8301 5.49493 19.9768 4.97087 20.3073C4.38395 20.6774 3.21687 21.6971 2.46195 21.2108C2 20.9133 2 20.1575 2 18.6458V8.05426C2 5.20025 2 3.77325 2.87868 2.88663C3.75736 2 5.17157 2 8 2H20" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
<path id="Vector_3" d="M10 8C8.89543 8 8 8.67157 8 9.5C8 10.3284 8.89543 11 10 11C11.1046 11 12 11.6716 12 12.5C12 13.3284 11.1046 14 10 14M10 8C10.8708 8 11.6116 8.4174 11.8862 9M10 8V7M10 14C9.12919 14 8.38836 13.5826 8.1138 13M10 14V15" stroke="white" stroke-width="1.5" stroke-linecap="round"/>
</g>
</svg>

================
File: assets/icons/camera.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.00024 6.00055C5.7796 6.00421 5.10407 6.03341 4.54897 6.2664C3.77144 6.59275 3.13825 7.19558 2.76835 7.96165C2.46642 8.58693 2.41702 9.38805 2.3182 10.9903L2.16336 13.501C1.91763 17.4854 1.79476 19.4776 2.96393 20.7388C4.13309 22 6.10277 22 10.0422 22H13.9584C17.8978 22 19.8674 22 21.0366 20.7388C22.2058 19.4776 22.0829 17.4854 21.8372 13.501L21.6823 10.9903C21.5835 9.38805 21.5341 8.58693 21.2322 7.96165C20.8623 7.19558 20.2291 6.59275 19.4516 6.2664C18.8965 6.03341 18.2209 6.00421 17.0003 6.00055" stroke="white" stroke-width="1.5" stroke-linecap="round"/>
<path d="M17 7L16.1142 4.78543C15.732 3.82996 15.3994 2.7461 14.4166 2.25955C13.8924 2 13.2616 2 12 2C10.7384 2 10.1076 2 9.58335 2.25955C8.6006 2.7461 8.26801 3.82996 7.88583 4.78543L7 7" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M15.5 14C15.5 15.933 13.933 17.5 12 17.5C10.067 17.5 8.5 15.933 8.5 14C8.5 12.067 10.067 10.5 12 10.5C13.933 10.5 15.5 12.067 15.5 14Z" stroke="white" stroke-width="1.5"/>
<path d="M11.9998 6H12.0088" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

================
File: assets/icons/cat-face.svg
================
<svg width="69" height="32" viewBox="0 0 69 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M22.5 5C22.5 7.20914 20.7091 9 18.5 9C16.2909 9 14.5 7.20914 14.5 5C14.5 2.79086 16.2909 1 18.5 1C20.7091 1 22.5 2.79086 22.5 5Z" fill="black"/>
<path d="M53.5 5C53.5 7.20914 51.7091 9 49.5 9C47.2909 9 45.5 7.20914 45.5 5C45.5 2.79086 47.2909 1 49.5 1C51.7091 1 53.5 2.79086 53.5 5Z" fill="black"/>
<path d="M35.2559 22.1271C34.8572 22.5876 34.1428 22.5876 33.7441 22.1271L30.7368 18.6547C30.1759 18.007 30.636 17 31.4928 17H37.5073C38.364 17 38.8241 18.007 38.2632 18.6547L35.2559 22.1271Z" fill="black"/>
<path d="M51.5 19H67.5M51.5 31H67.5M1.5 19H17.5M1.5 31H17.5M34.4886 22C34.8912 29.5918 24.5 29.7179 24.5 23.8523M34.5125 22C34.0697 29.5918 45.5 29.7179 45.5 23.8523M22.5 5C22.5 7.20914 20.7091 9 18.5 9C16.2909 9 14.5 7.20914 14.5 5C14.5 2.79086 16.2909 1 18.5 1C20.7091 1 22.5 2.79086 22.5 5ZM53.5 5C53.5 7.20914 51.7091 9 49.5 9C47.2909 9 45.5 7.20914 45.5 5C45.5 2.79086 47.2909 1 49.5 1C51.7091 1 53.5 2.79086 53.5 5ZM37.5073 17H31.4928C30.636 17 30.1759 18.007 30.7368 18.6547L33.7441 22.1271C34.1428 22.5876 34.8572 22.5876 35.2559 22.1271L38.2632 18.6547C38.8241 18.007 38.364 17 37.5073 17Z" stroke="black" stroke-width="2" stroke-linecap="round"/>
</svg>

================
File: assets/icons/delete.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<g id="delete-01">
<path id="Vector" d="M19.5 5.5L18.8803 15.5251C18.7219 18.0864 18.6428 19.3671 18.0008 20.2879C17.6833 20.7431 17.2747 21.1273 16.8007 21.416C15.8421 22 14.559 22 11.9927 22C9.42312 22 8.1383 22 7.17905 21.4149C6.7048 21.1257 6.296 20.7408 5.97868 20.2848C5.33688 19.3626 5.25945 18.0801 5.10461 15.5152L4.5 5.5" stroke="#EE8F8F" stroke-width="1.5" stroke-linecap="round"/>
<path id="Vector_2" d="M3 5.5H21M16.0557 5.5L15.3731 4.09173C14.9196 3.15626 14.6928 2.68852 14.3017 2.39681C14.215 2.3321 14.1231 2.27454 14.027 2.2247C13.5939 2 13.0741 2 12.0345 2C10.9688 2 10.436 2 9.99568 2.23412C9.8981 2.28601 9.80498 2.3459 9.71729 2.41317C9.32164 2.7167 9.10063 3.20155 8.65861 4.17126L8.05292 5.5" stroke="#EE8F8F" stroke-width="1.5" stroke-linecap="round"/>
</g>
</svg>

================
File: assets/icons/google.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M23.04 12.2614C23.04 11.4459 22.9668 10.6618 22.8309 9.90909H12V14.3575H18.1891C17.9225 15.795 17.1123 17.013 15.8943 17.8284V20.7139H19.6109C21.7855 18.7118 23.04 15.7636 23.04 12.2614Z" fill="#4285F4"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M12 23.4998C15.105 23.4998 17.7081 22.4701 19.6109 20.7137L15.8943 17.8282C14.8645 18.5182 13.5472 18.926 12 18.926C9.00474 18.926 6.46951 16.903 5.56519 14.1848H1.72314V17.1644C3.61542 20.9228 7.50451 23.4998 12 23.4998Z" fill="#34A853"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M5.56523 14.1851C5.33523 13.4951 5.20455 12.758 5.20455 12.0001C5.20455 11.2421 5.33523 10.5051 5.56523 9.81506V6.83552H1.72318C0.944318 8.38802 0.5 10.1444 0.5 12.0001C0.5 13.8557 0.944318 15.6121 1.72318 17.1646L5.56523 14.1851Z" fill="#FBBC05"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M12 5.07386C13.6884 5.07386 15.2043 5.65409 16.3961 6.79364L19.6945 3.49523C17.7029 1.63955 15.0997 0.5 12 0.5C7.50451 0.5 3.61542 3.07705 1.72314 6.83545L5.56519 9.815C6.46951 7.09682 9.00474 5.07386 12 5.07386Z" fill="#EA4335"/>
</svg>

================
File: assets/icons/logout.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<g id="logout-03">
<path id="Vector" d="M9 6.375C9.0736 4.5231 10.6169 2.9506 12.6844 3.0012C13.1654 3.013 13.7599 3.1806 14.9489 3.516C17.8104 4.3232 20.2944 5.6797 20.8904 8.7185C21 9.277 21 9.9056 21 11.1627V12.8373C21 14.0944 21 14.7229 20.8904 15.2815C20.2944 18.3203 17.8104 19.6768 14.9489 20.484C13.7599 20.8194 13.1654 20.987 12.6844 20.9988C10.6169 21.0494 9.0736 19.4769 9 17.625" stroke="#EE8F8F" stroke-width="1.5" stroke-linecap="round"/>
<path id="Vector_2" d="M3 12L14 12M3 12C3 12.7002 4.9943 14.0085 5.5 14.5M3 12C3 11.2998 4.9943 9.9915 5.5 9.5" stroke="#EE8F8F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</g>
</svg>

================
File: assets/icons/profile.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6.57757 15.4816C5.1628 16.324 1.45336 18.0441 3.71266 20.1966C4.81631 21.248 6.04549 22 7.59087 22H16.4091C17.9545 22 19.1837 21.248 20.2873 20.1966C22.5466 18.0441 18.8372 16.324 17.4224 15.4816C14.1048 13.5061 9.89519 13.5061 6.57757 15.4816Z" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M16.5 6.5C16.5 8.98528 14.4853 11 12 11C9.51472 11 7.5 8.98528 7.5 6.5C7.5 4.01472 9.51472 2 12 2C14.4853 2 16.5 4.01472 16.5 6.5Z" stroke="white" stroke-width="1.5"/>
</svg>

================
File: assets/icons/return.svg
================
<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<g id="arrow-turn-backward">
<path id="Vector" d="M22 12H31C35.9706 12 40 16.0294 40 21C40 25.9706 35.9706 30 31 30H8" stroke="#FFE0CC" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
<path id="Vector_2" d="M14 24C14 24 8.00002 28.419 8 30C7.99998 31.5812 14 36 14 36" stroke="#FFE0CC" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</g>
</svg>

================
File: assets/icons/settings.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M15.5 12C15.5 13.933 13.933 15.5 12 15.5C10.067 15.5 8.5 13.933 8.5 12C8.5 10.067 10.067 8.5 12 8.5C13.933 8.5 15.5 10.067 15.5 12Z" stroke="white" stroke-width="1.5"/>
<path d="M21.011 14.0965C21.5329 13.9558 21.7939 13.8854 21.8969 13.7508C22 13.6163 22 13.3998 22 12.9669V11.0332C22 10.6003 22 10.3838 21.8969 10.2493C21.7938 10.1147 21.5329 10.0443 21.011 9.90359C19.0606 9.3776 17.8399 7.33852 18.3433 5.40088C18.4817 4.868 18.5509 4.60157 18.4848 4.4453C18.4187 4.28903 18.2291 4.18135 17.8497 3.96597L16.125 2.98674C15.7528 2.7754 15.5667 2.66973 15.3997 2.69223C15.2326 2.71473 15.0442 2.90274 14.6672 3.27874C13.208 4.73449 10.7936 4.73443 9.33434 3.27865C8.95743 2.90264 8.76898 2.71464 8.60193 2.69213C8.43489 2.66963 8.24877 2.7753 7.87653 2.98664L6.15184 3.96588C5.77253 4.18124 5.58287 4.28892 5.51678 4.44516C5.45068 4.60141 5.51987 4.86788 5.65825 5.40081C6.16137 7.33851 4.93972 9.37764 2.98902 9.90361C2.46712 10.0443 2.20617 10.1147 2.10308 10.2492C2 10.3838 2 10.6003 2 11.0332V12.9669C2 13.3998 2 13.6163 2.10308 13.7508C2.20615 13.8854 2.46711 13.9558 2.98902 14.0965C4.9394 14.6225 6.16008 16.6616 5.65672 18.5992C5.51829 19.1321 5.44907 19.3985 5.51516 19.5548C5.58126 19.7111 5.77092 19.8188 6.15025 20.0341L7.87495 21.0134C8.24721 21.2247 8.43334 21.3304 8.6004 21.3079C8.76746 21.2854 8.95588 21.0973 9.33271 20.7213C10.7927 19.2644 13.2088 19.2643 14.6689 20.7212C15.0457 21.0973 15.2341 21.2853 15.4012 21.3078C15.5682 21.3303 15.7544 21.2246 16.1266 21.0133L17.8513 20.034C18.2307 19.8187 18.4204 19.711 18.4864 19.5547C18.5525 19.3984 18.4833 19.132 18.3448 18.5991C17.8412 16.6616 19.0609 14.6226 21.011 14.0965Z" stroke="white" stroke-width="1.5" stroke-linecap="round"/>
</svg>

================
File: assets/icons/share.svg
================
<svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
<g id="share-01">
<path id="Vector" d="M20.3927 8.53168L18.6457 7.01461C17.3871 5.92153 16.8937 5.33352 16.2121 5.54139C15.3622 5.80059 15.642 7.43609 15.642 7.98824C14.3206 7.98824 12.9468 7.88661 11.6443 8.09836C7.34453 8.79742 6 11.8566 6 15.1525C7.21697 14.4065 8.43274 13.5746 9.8954 13.2289C11.7212 12.7973 13.7603 13.0032 15.642 13.0032C15.642 13.5554 15.3622 15.1909 16.2121 15.4501C16.9844 15.6856 17.3871 15.0699 18.6457 13.9769L20.3927 12.4598C21.4642 11.5293 22 11.064 22 10.4957C22 9.9275 21.4642 9.46223 20.3927 8.53168Z" stroke="#FFE0CC" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
<path id="Vector_2" d="M10.5676 3.5C6.70735 3.50694 4.68594 3.60152 3.39411 4.89073C2 6.28202 2 8.52125 2 12.9997C2 17.4782 2 19.7174 3.3941 21.1087C4.78821 22.5 7.03198 22.5 11.5195 22.5C16.0071 22.5 18.2509 22.5 19.645 21.1087C20.6156 20.14 20.9104 18.7603 21 16.5" stroke="#FFE0CC" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</g>
</svg>

================
File: assets/icons/view.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<g id="view">
<path id="Vector" d="M21.544 11.045C21.848 11.4713 22 11.6845 22 12C22 12.3155 21.848 12.5287 21.544 12.955C20.1779 14.8706 16.6892 19 12 19C7.31078 19 3.8221 14.8706 2.45604 12.955C2.15201 12.5287 2 12.3155 2 12C2 11.6845 2.15201 11.4713 2.45604 11.045C3.8221 9.12944 7.31078 5 12 5C16.6892 5 20.1779 9.12944 21.544 11.045Z" stroke="white" stroke-width="1.5"/>
<path id="Vector_2" d="M15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15C13.6569 15 15 13.6569 15 12Z" stroke="white" stroke-width="1.5"/>
</g>
</svg>

================
File: assets/iconsSVGJS/CameraIcon.js
================
import * as React from "react";
import Svg, { Path } from "react-native-svg";

const CameraIcon = (props) => (
  <Svg
    width={props.width}
    height={props.height}
    viewBox="0 0 24 24"
    fill={props.fill}
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <Path
      d="M7.00024 6.00055C5.7796 6.00421 5.10407 6.03341 4.54897 6.2664C3.77144 6.59275 3.13825 7.19558 2.76835 7.96165C2.46642 8.58693 2.41702 9.38805 2.3182 10.9903L2.16336 13.501C1.91763 17.4854 1.79476 19.4776 2.96393 20.7388C4.13309 22 6.10277 22 10.0422 22H13.9584C17.8978 22 19.8674 22 21.0366 20.7388C22.2058 19.4776 22.0829 17.4854 21.8372 13.501L21.6823 10.9903C21.5835 9.38805 21.5341 8.58693 21.2322 7.96165C20.8623 7.19558 20.2291 6.59275 19.4516 6.2664C18.8965 6.03341 18.2209 6.00421 17.0003 6.00055"
      stroke={props.stroke || "white"}
      strokeWidth={1.5}
      strokeLinecap="round"
    />
    <Path
      d="M17 7L16.1142 4.78543C15.732 3.82996 15.3994 2.7461 14.4166 2.25955C13.8924 2 13.2616 2 12 2C10.7384 2 10.1076 2 9.58335 2.25955C8.6006 2.7461 8.26801 3.82996 7.88583 4.78543L7 7"
      stroke={props.stroke || "white"}
      strokeWidth={1.5}
      strokeLinecap="round"
      strokeLinejoin="round"
    />
    <Path
      d="M15.5 14C15.5 15.933 13.933 17.5 12 17.5C10.067 17.5 8.5 15.933 8.5 14C8.5 12.067 10.067 10.5 12 10.5C13.933 10.5 15.5 12.067 15.5 14Z"
      stroke={props.stroke || "white"}
      strokeWidth={1.5}
    />
    <Path
      d="M11.9998 6H12.0088"
      stroke={props.stroke || "white"}
      strokeWidth={2}
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </Svg>
);

export default CameraIcon;

================
File: assets/iconsSVGJS/HomeIcon.js
================
import * as React from "react";
import Svg, { Path } from "react-native-svg";

const HomeIcon = (props) => (
  <Svg
    width={props.width}
    height={props.height}
    viewBox="0 0 24 24"
    fill={props.fill}
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <Path
      d="M8.99956 22L8.74893 18.4911C8.61418 16.6046 10.1083 15 11.9996 15C13.8909 15 15.385 16.6046 15.2502 18.4911L14.9996 22"
      stroke={props.stroke || "white"}
      strokeWidth={1.5}
    />
    <Path
      d="M2.35163 13.2135C1.99861 10.9162 1.8221 9.76763 2.25641 8.74938C2.69071 7.73112 3.65427 7.03443 5.58138 5.64106L7.02123 4.6C9.41853 2.86667 10.6172 2 12.0003 2C13.3833 2 14.582 2.86667 16.9793 4.6L18.4191 5.64106C20.3463 7.03443 21.3098 7.73112 21.7441 8.74938C22.1784 9.76763 22.0019 10.9162 21.6489 13.2135L21.3479 15.1724C20.8474 18.4289 20.5972 20.0572 19.4293 21.0286C18.2614 22 16.5539 22 13.1391 22H10.8615C7.44658 22 5.73915 22 4.57124 21.0286C3.40333 20.0572 3.15311 18.4289 2.65267 15.1724L2.35163 13.2135Z"
      stroke={props.stroke || "white"}
      strokeWidth={1.5}
      strokeLinejoin="round"
    />
  </Svg>
);

export default HomeIcon;

================
File: assets/iconsSVGJS/ProfileIcon.js
================
import * as React from "react";
import Svg, { Path } from "react-native-svg";

const ProfileIcon = (props) => (
  <Svg
    width={props.width}
    height={props.height}
    viewBox="0 0 24 24"
    fill={props.fill}
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <Path
      d="M6.57757 15.4816C5.1628 16.324 1.45336 18.0441 3.71266 20.1966C4.81631 21.248 6.04549 22 7.59087 22H16.4091C17.9545 22 19.1837 21.248 20.2873 20.1966C22.5466 18.0441 18.8372 16.324 17.4224 15.4816C14.1048 13.5061 9.89519 13.5061 6.57757 15.4816Z"
      stroke={props.stroke || "white"}
      strokeWidth={1.5}
      strokeLinecap="round"
      strokeLinejoin="round"
    />
    <Path
      d="M16.5 6.5C16.5 8.98528 14.4853 11 12 11C9.51472 11 7.5 8.98528 7.5 6.5C7.5 4.01472 9.51472 2 12 2C14.4853 2 16.5 4.01472 16.5 6.5Z"
      stroke={props.stroke || "white"}
      strokeWidth={1.5}
    />
  </Svg>
);

export default ProfileIcon;

================
File: assets/iconsSVGJS/SettingsIcon.js
================
import * as React from "react";
import Svg, { Path } from "react-native-svg";

const SettingsIcon = (props) => (
  <Svg
    width={props.width}
    height={props.height}
    viewBox="0 0 24 24"
    fill={props.fill}
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <Path
      d="M15.5 12C15.5 13.933 13.933 15.5 12 15.5C10.067 15.5 8.5 13.933 8.5 12C8.5 10.067 10.067 8.5 12 8.5C13.933 8.5 15.5 10.067 15.5 12Z"
      stroke={props.stroke || "white"}
      strokeWidth={1.5}
    />
    <Path
      d="M21.011 14.0965C21.5329 13.9558 21.7939 13.8854 21.8969 13.7508C22 13.6163 22 13.3998 22 12.9669V11.0332C22 10.6003 22 10.3838 21.8969 10.2493C21.7938 10.1147 21.5329 10.0443 21.011 9.90359C19.0606 9.3776 17.8399 7.33852 18.3433 5.40088C18.4817 4.868 18.5509 4.60157 18.4848 4.4453C18.4187 4.28903 18.2291 4.18135 17.8497 3.96597L16.125 2.98674C15.7528 2.7754 15.5667 2.66973 15.3997 2.69223C15.2326 2.71473 15.0442 2.90274 14.6672 3.27874C13.208 4.73449 10.7936 4.73443 9.33434 3.27865C8.95743 2.90264 8.76898 2.71464 8.60193 2.69213C8.43489 2.66963 8.24877 2.7753 7.87653 2.98664L6.15184 3.96588C5.77253 4.18124 5.58287 4.28892 5.51678 4.44516C5.45068 4.60141 5.51987 4.86788 5.65825 5.40081C6.16137 7.33851 4.93972 9.37764 2.98902 9.90361C2.46712 10.0443 2.20617 10.1147 2.10308 10.2492C2 10.3838 2 10.6003 2 11.0332V12.9669C2 13.3998 2 13.6163 2.10308 13.7508C2.20615 13.8854 2.46711 13.9558 2.98902 14.0965C4.9394 14.6225 6.16008 16.6616 5.65672 18.5992C5.51829 19.1321 5.44907 19.3985 5.51516 19.5548C5.58126 19.7111 5.77092 19.8188 6.15025 20.0341L7.87495 21.0134C8.24721 21.2247 8.43334 21.3304 8.6004 21.3079C8.76746 21.2854 8.95588 21.0973 9.33271 20.7213C10.7927 19.2644 13.2088 19.2643 14.6689 20.7212C15.0457 21.0973 15.2341 21.2853 15.4012 21.3078C15.5682 21.3303 15.7544 21.2246 16.1266 21.0133L17.8513 20.034C18.2307 19.8187 18.4204 19.711 18.4864 19.5547C18.5525 19.3984 18.4833 19.132 18.3448 18.5991C17.8412 16.6616 19.0609 14.6226 21.011 14.0965Z"
      stroke={props.stroke || "white"}
      strokeWidth={1.5}
      strokeLinecap="round"
    />
  </Svg>
);

export default SettingsIcon;

================
File: components/__tests__/__snapshots__/ThemedText-test.tsx.snap
================
// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<Text
  style={
    [
      {
        "color": "#11181C",
      },
      {
        "fontSize": 16,
        "lineHeight": 24,
      },
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    ]
  }
>
  Snapshot test!
</Text>
`;

================
File: components/__tests__/ThemedText-test.tsx
================
import * as React from 'react';
import renderer from 'react-test-renderer';

import { ThemedText } from '../ThemedText';

it(`renders correctly`, () => {
  const tree = renderer.create(<ThemedText>Snapshot test!</ThemedText>).toJSON();

  expect(tree).toMatchSnapshot();
});

================
File: components/navigation/TabBarIcon.tsx
================
// You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/

import Ionicons from '@expo/vector-icons/Ionicons';
import { type IconProps } from '@expo/vector-icons/build/createIconSet';
import { type ComponentProps } from 'react';

export function TabBarIcon({ style, ...rest }: IconProps<ComponentProps<typeof Ionicons>['name']>) {
  return <Ionicons size={28} style={[{ marginBottom: -3 }, style]} {...rest} />;
}

================
File: components/Collapsible.tsx
================
import Ionicons from '@expo/vector-icons/Ionicons';
import { PropsWithChildren, useState } from 'react';
import { StyleSheet, TouchableOpacity, useColorScheme } from 'react-native';

import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { Colors } from '@/constants/Colors';

export function Collapsible({ children, title }: PropsWithChildren & { title: string }) {
  const [isOpen, setIsOpen] = useState(false);
  const theme = useColorScheme() ?? 'light';

  return (
    <ThemedView>
      <TouchableOpacity
        style={styles.heading}
        onPress={() => setIsOpen((value) => !value)}
        activeOpacity={0.8}>
        <Ionicons
          name={isOpen ? 'chevron-down' : 'chevron-forward-outline'}
          size={18}
          color={theme === 'light' ? Colors.light.icon : Colors.dark.icon}
        />
        <ThemedText type="defaultSemiBold">{title}</ThemedText>
      </TouchableOpacity>
      {isOpen && <ThemedView style={styles.content}>{children}</ThemedView>}
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  heading: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
  },
  content: {
    marginTop: 6,
    marginLeft: 24,
  },
});

================
File: components/ExternalLink.tsx
================
import { Link } from 'expo-router';
import { openBrowserAsync } from 'expo-web-browser';
import { type ComponentProps } from 'react';
import { Platform } from 'react-native';

type Props = Omit<ComponentProps<typeof Link>, 'href'> & { href: string };

export function ExternalLink({ href, ...rest }: Props) {
  return (
    <Link
      target="_blank"
      {...rest}
      href={href}
      onPress={async (event) => {
        if (Platform.OS !== 'web') {
          // Prevent the default behavior of linking to the default browser on native.
          event.preventDefault();
          // Open the link in an in-app browser.
          await openBrowserAsync(href);
        }
      }}
    />
  );
}

================
File: components/HelloWave.tsx
================
import { StyleSheet } from 'react-native';
import Animated, {
  useSharedValue,
  useAnimatedStyle,
  withTiming,
  withRepeat,
  withSequence,
} from 'react-native-reanimated';

import { ThemedText } from '@/components/ThemedText';

export function HelloWave() {
  const rotationAnimation = useSharedValue(0);

  rotationAnimation.value = withRepeat(
    withSequence(withTiming(25, { duration: 150 }), withTiming(0, { duration: 150 })),
    4 // Run the animation 4 times
  );

  const animatedStyle = useAnimatedStyle(() => ({
    transform: [{ rotate: `${rotationAnimation.value}deg` }],
  }));

  return (
    <Animated.View style={animatedStyle}>
      <ThemedText style={styles.text}>üëã</ThemedText>
    </Animated.View>
  );
}

const styles = StyleSheet.create({
  text: {
    fontSize: 28,
    lineHeight: 32,
    marginTop: -6,
  },
});

================
File: components/ParallaxScrollView.tsx
================
import type { PropsWithChildren, ReactElement } from 'react';
import { StyleSheet, useColorScheme } from 'react-native';
import Animated, {
  interpolate,
  useAnimatedRef,
  useAnimatedStyle,
  useScrollViewOffset,
} from 'react-native-reanimated';

import { ThemedView } from '@/components/ThemedView';

const HEADER_HEIGHT = 250;

type Props = PropsWithChildren<{
  headerImage: ReactElement;
  headerBackgroundColor: { dark: string; light: string };
}>;

export default function ParallaxScrollView({
  children,
  headerImage,
  headerBackgroundColor,
}: Props) {
  const colorScheme = useColorScheme() ?? 'light';
  const scrollRef = useAnimatedRef<Animated.ScrollView>();
  const scrollOffset = useScrollViewOffset(scrollRef);

  const headerAnimatedStyle = useAnimatedStyle(() => {
    return {
      transform: [
        {
          translateY: interpolate(
            scrollOffset.value,
            [-HEADER_HEIGHT, 0, HEADER_HEIGHT],
            [-HEADER_HEIGHT / 2, 0, HEADER_HEIGHT * 0.75]
          ),
        },
        {
          scale: interpolate(scrollOffset.value, [-HEADER_HEIGHT, 0, HEADER_HEIGHT], [2, 1, 1]),
        },
      ],
    };
  });

  return (
    <ThemedView style={styles.container}>
      <Animated.ScrollView ref={scrollRef} scrollEventThrottle={16}>
        <Animated.View
          style={[
            styles.header,
            { backgroundColor: headerBackgroundColor[colorScheme] },
            headerAnimatedStyle,
          ]}>
          {headerImage}
        </Animated.View>
        <ThemedView style={styles.content}>{children}</ThemedView>
      </Animated.ScrollView>
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    height: 250,
    overflow: 'hidden',
  },
  content: {
    flex: 1,
    padding: 32,
    gap: 16,
    overflow: 'hidden',
  },
});

================
File: components/ThemedText.tsx
================
import { Text, type TextProps, StyleSheet } from 'react-native';

import { useThemeColor } from '@/hooks/useThemeColor';

export type ThemedTextProps = TextProps & {
  lightColor?: string;
  darkColor?: string;
  type?: 'default' | 'title' | 'defaultSemiBold' | 'subtitle' | 'link';
};

export function ThemedText({
  style,
  lightColor,
  darkColor,
  type = 'default',
  ...rest
}: ThemedTextProps) {
  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');

  return (
    <Text
      style={[
        { color },
        type === 'default' ? styles.default : undefined,
        type === 'title' ? styles.title : undefined,
        type === 'defaultSemiBold' ? styles.defaultSemiBold : undefined,
        type === 'subtitle' ? styles.subtitle : undefined,
        type === 'link' ? styles.link : undefined,
        style,
      ]}
      {...rest}
    />
  );
}

const styles = StyleSheet.create({
  default: {
    fontSize: 16,
    lineHeight: 24,
  },
  defaultSemiBold: {
    fontSize: 16,
    lineHeight: 24,
    fontWeight: '600',
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    lineHeight: 32,
  },
  subtitle: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  link: {
    lineHeight: 30,
    fontSize: 16,
    color: '#0a7ea4',
  },
});

================
File: components/ThemedView.tsx
================
import { View, type ViewProps } from 'react-native';

import { useThemeColor } from '@/hooks/useThemeColor';

export type ThemedViewProps = ViewProps & {
  lightColor?: string;
  darkColor?: string;
};

export function ThemedView({ style, lightColor, darkColor, ...otherProps }: ThemedViewProps) {
  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');

  return <View style={[{ backgroundColor }, style]} {...otherProps} />;
}

================
File: components/useColorScheme.tsx
================
export { useColorScheme } from 'react-native';

================
File: components/useColorScheme.web.tsx
================
// NOTE: The default React Native styling doesn't support server rendering.
// Server rendered styles should not change between the first render of the HTML
// and the first render on the client. Typically, web developers will use CSS media queries
// to render different styles on the client and server, these aren't directly supported in React Native
// but can be achieved using a styling library like Nativewind.
export function useColorScheme() {
    return 'light';
  }

================
File: constants/Colors.ts
================
/**
 * Below are the colors that are used in the app. The colors are defined in the light and dark mode.
 * There are many other ways to style your app. For example, [Nativewind](https://www.nativewind.dev/), [Tamagui](https://tamagui.dev/), [unistyles](https://reactnativeunistyles.vercel.app), etc.
 */

const tintColorLight = '#0a7ea4';
const tintColorDark = '#fff';

export const Colors = {
  light: {
    text: '#11181C',
    background: '#fff',
    tint: tintColorLight,
    icon: '#687076',
    tabIconDefault: '#687076',
    tabIconSelected: tintColorLight,
  },
  dark: {
    text: '#ECEDEE',
    background: '#151718',
    tint: tintColorDark,
    icon: '#9BA1A6',
    tabIconDefault: '#9BA1A6',
    tabIconSelected: tintColorDark,
  },
};

================
File: hooks/useCameraFlow.ts
================
import { useCallback } from 'react';
import { useDispatch } from 'react-redux';
import * as ImagePicker from 'expo-image-picker';
import * as ImageManipulator from 'expo-image-manipulator';
import { useAppSelector } from '@/src/store/hooks';
import { addEmotionRecord } from '@/src/store/petSlice';
import {
  setStage,
  setSelectedPet,
  setImage,
  setAnalyzing,
  setAnalysisResult,
  setEmotionDetails,
  setAnalysisTimestamp,
} from '@/src/store/cameraFlowSlice';
import { RootState } from '@/store';

const url = process.env.EXPO_PUBLIC_API_URL;

export function useCameraFlow() {
  const dispatch = useDispatch();
  const petName = useAppSelector((state: RootState) => state.pet.name);

  const emotionEmojiMap = {
    "Content": "üò∫",
    "Happy": "üò∏",
    "Curious": "üê±",
    "Affectionate": "üòΩ",
    "Scared": "üôÄ",
    "Aggressive": "üòæ",
    "Annoyed": "üòº",
    "Anxious": "üòø",
    "Sad": "üòø",
    "Bored": "üêà",
    "Sleepy": "üò¥"
  };
  
  const getEmotionEmoji = useCallback((emotion) => {
    return emotionEmojiMap[emotion] || 'üê±';
  }, []);

  const compressAndResizeImage = useCallback(async (uri) => {
    const manipulatedImage = await ImageManipulator.manipulateAsync(
      uri,
      [{ resize: { width: 512, height: 512 } }],
      { compress: 0.7, format: ImageManipulator.SaveFormat.JPEG, base64: true }
    );
    return manipulatedImage.base64;
  }, []);

  const handleImageSelection = useCallback(async (type) => {
    let result;
    if (type === 'camera') {
      result = await ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 1,
      });
    } else {
      result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 1,
      });
    }
  
    if (!result.canceled) {
      dispatch(setImage(result.assets[0].uri));
      const compressedImage = await compressAndResizeImage(result.assets[0].uri);
      dispatch(analyzeImage(compressedImage));
    }
  }, [dispatch, compressAndResizeImage]);

  const handleNewPicture = useCallback(() => {
    dispatch(setImage(null));
    dispatch(setAnalysisResult(null));
    dispatch(setEmotionDetails(null));
    dispatch(setStage('imageCapture'));
  }, [dispatch]);

  const formatTimestamp = useCallback((timestamp) => {
    if (!timestamp) return '';
    return timestamp.toLocaleString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    });
  }, []);

  const handleContinue = useCallback(() => {
    dispatch(setStage('imageCapture'));
  }, [dispatch]);

  const handleCancelSelection = useCallback(() => {
    dispatch(setSelectedPet(null));
    dispatch(setStage('petSelection'));
  }, [dispatch]);

  return {
    handleImageSelection,
    handleNewPicture,
    formatTimestamp,
    handleContinue,
    handleCancelSelection,
    setSelectedPet: (pet: number | null) => dispatch(setSelectedPet(pet)),
  };
}

================
File: hooks/useColorScheme.ts
================
export { useColorScheme } from 'react-native';

================
File: hooks/useColorScheme.web.ts
================
// NOTE: The default React Native styling doesn't support server rendering.
// Server rendered styles should not change between the first render of the HTML
// and the first render on the client. Typically, web developers will use CSS media queries
// to render different styles on the client and server, these aren't directly supported in React Native
// but can be achieved using a styling library like Nativewind.
export function useColorScheme() {
  return 'light';
}

================
File: hooks/useThemeColor.ts
================
/**
 * Learn more about light and dark modes:
 * https://docs.expo.dev/guides/color-schemes/
 */

import { useColorScheme } from 'react-native';

import { Colors } from '@/constants/Colors';

export function useThemeColor(
  props: { light?: string; dark?: string },
  colorName: keyof typeof Colors.light & keyof typeof Colors.dark
) {
  const theme = useColorScheme() ?? 'light';
  const colorFromProps = props[theme];

  if (colorFromProps) {
    return colorFromProps;
  } else {
    return Colors[theme][colorName];
  }
}

================
File: scripts/reset-project.js
================
#!/usr/bin/env node

/**
 * This script is used to reset the project to a blank state.
 * It moves the /app directory to /app-example and creates a new /app directory with an index.tsx and _layout.tsx file.
 * You can remove the `reset-project` script from package.json and safely delete this file after running it.
 */

const fs = require('fs');
const path = require('path');

const root = process.cwd();
const oldDirPath = path.join(root, 'app');
const newDirPath = path.join(root, 'app-example');
const newAppDirPath = path.join(root, 'app');

const indexContent = `import { Text, View } from "react-native";

export default function Index() {
  return (
    <View
      style={{
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
      }}
    >
      <Text>Edit app/index.tsx to edit this screen.</Text>
    </View>
  );
}
`;

const layoutContent = `import { Stack } from "expo-router";

export default function RootLayout() {
  return (
    <Stack>
      <Stack.Screen name="index" />
    </Stack>
  );
}
`;

fs.rename(oldDirPath, newDirPath, (error) => {
  if (error) {
    return console.error(`Error renaming directory: ${error}`);
  }
  console.log('/app moved to /app-example.');

  fs.mkdir(newAppDirPath, { recursive: true }, (error) => {
    if (error) {
      return console.error(`Error creating new app directory: ${error}`);
    }
    console.log('New /app directory created.');

    const indexPath = path.join(newAppDirPath, 'index.tsx');
    fs.writeFile(indexPath, indexContent, (error) => {
      if (error) {
        return console.error(`Error creating index.tsx: ${error}`);
      }
      console.log('app/index.tsx created.');

      const layoutPath = path.join(newAppDirPath, '_layout.tsx');
      fs.writeFile(layoutPath, layoutContent, (error) => {
        if (error) {
          return console.error(`Error creating _layout.tsx: ${error}`);
        }
        console.log('app/_layout.tsx created.');
      });
    });
  });
});

================
File: src/api/catApi.ts
================
const url = process.env.EXPO_PUBLIC_API_URL;

export const analyzeCat = async (base64Image: string) => {
  console.log(url)
  const response = await fetch(`${url}/analyze-cat`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ image: base64Image }),
  });
  
  if (!response.ok) {
    console.error('API response not OK:', response.status, response.statusText);
    throw new Error(`API response not OK: ${response.status} ${response.statusText}`);
  }
  
  return response.json();
  
};

export const getEmotionDetails = async (emotion: string) => {
  const response = await fetch(`${url}/get-emotion-details`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ emotion }),
  });

  if (!response.ok) {
    throw new Error('Invalid emotion details response');
  }

  return response.json();
};

================
File: src/store/authSlice.ts
================
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface AuthState {
  isAuthenticated: boolean;
  user: string | null;
}

const initialState: AuthState = {
  isAuthenticated: false,
  user: 'user',
};

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    login: (state, action: PayloadAction<string>) => {
      state.isAuthenticated = true;
      state.user = action.payload;
    },
    logout: (state) => {
      state.isAuthenticated = false;
      state.user = null;
    },
  },
});

export const { login, logout } = authSlice.actions;
export default authSlice.reducer;

================
File: src/store/cameraFlowSlice.ts
================
import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';
import { analyzeCat, getEmotionDetails } from '../api/catApi';
import { getEmotionEmoji } from '../utils/emotionUtils';

interface CameraFlowState {
  stage: 'petSelection' | 'imageCapture' | 'analysisResult';
  selectedPet: number | null;
  image: string | null;
  analyzing: boolean;
  analysisResult: any;
  emotionDetails: any;
  analysisTimestamp: string | null;
}

const initialState: CameraFlowState = {
  stage: 'petSelection',
  selectedPet: null,
  image: null,
  analyzing: false,
  analysisResult: null,
  emotionDetails: null,
  analysisTimestamp: null,
};

export const analyzeImage = createAsyncThunk(
  'cameraFlow/analyzeImage',
  async (base64Image: string, { dispatch, rejectWithValue }) => {
    dispatch(setAnalyzing(true));
    dispatch(setAnalysisTimestamp(new Date().toISOString()));
    try {
      const data = await analyzeCat(base64Image);
      if (!data.message.startsWith('ERROR:')) {
        const emotionDetails = await getEmotionDetails(data.message);
        return { analysisResult: data, emotionDetails };
      }
      return rejectWithValue(data.message);
    } catch (error) {
      console.error('Error in analyzeImage:', error);
      return rejectWithValue(error.message || 'Analysis failed');
    }
  }
);

const cameraFlowSlice = createSlice({
  name: 'cameraFlow',
  initialState,
  reducers: {
    setStage: (state, action: PayloadAction<CameraFlowState['stage']>) => {
      state.stage = action.payload;
    },
    setSelectedPet: (state, action: PayloadAction<number | null>) => {
      state.selectedPet = action.payload;
    },
    setImage: (state, action: PayloadAction<string | null>) => {
      state.image = action.payload;
    },
    setAnalyzing: (state, action: PayloadAction<boolean>) => {
      state.analyzing = action.payload;
    },
    setAnalysisResult: (state, action: PayloadAction<any>) => {
      state.analysisResult = action.payload;
    },
    setEmotionDetails: (state, action: PayloadAction<any>) => {
      state.emotionDetails = action.payload;
    },
    setAnalysisTimestamp: (state, action: PayloadAction<string | null>) => {
      state.analysisTimestamp = action.payload;
    },
    resetCameraFlow: (state) => {
      return initialState;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(analyzeImage.pending, (state) => {
        state.analyzing = true;
        state.analysisResult = null;
        state.emotionDetails = null;
      })
      .addCase(analyzeImage.fulfilled, (state, action) => {
        state.analyzing = false;
        const { analysisResult, emotionDetails } = action.payload;
        state.analysisResult = {
          emotion: analysisResult.message,
          emoji: getEmotionEmoji(analysisResult.message),
        };
        state.emotionDetails = emotionDetails;
        state.stage = 'analysisResult';
      })
      .addCase(analyzeImage.rejected, (state, action) => {
        state.analyzing = false;
        state.analysisResult = {
          emotion: 'Failed to analyze image. Please try again.',
          emoji: '‚ùì',
        };
        state.stage = 'analysisResult';
      });
  },
});

export const {
  setStage,
  setSelectedPet,
  setImage,
  setAnalyzing,
  setAnalysisResult,
  setEmotionDetails,
  setAnalysisTimestamp,
  resetCameraFlow,
} = cameraFlowSlice.actions;

export default cameraFlowSlice.reducer;

================
File: src/store/hooks.ts
================
import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
import type { RootState, AppDispatch } from './index';

export const useAppDispatch = () => useDispatch<AppDispatch>();
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

================
File: src/store/index.ts
================
import { configureStore } from '@reduxjs/toolkit';
import authReducer from './authSlice';
import petReducer from './petSlice';
import cameraReducer from './cameraFlowSlice';

const store = configureStore({
  reducer: {
    auth: authReducer,
    pet: petReducer,
    cameraFlow: cameraReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

export default store;

================
File: src/store/petSlice.ts
================
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface EmotionRecord {
  image: string;
  emotion: string;
  emotionText: string;
  tipsAndRecs: string[];
  timestamp: number;
}

interface Pet {
  coverPicture: string | null;
  name: string;
  birthday: string | null;
  breed: string | null;
  emotionHistory: EmotionRecord[];
}

interface PetState {
  pets: Pet[];
}

const initialState: PetState = {
  pets: []
};

const petSlice = createSlice({
  name: 'pet',
  initialState,
  reducers: {
    updatePetInfo: (state, action: PayloadAction<{ index: number; pet: Partial<Pet> }>) => {
      const { index, pet } = action.payload;
      state.pets[index] = { ...state.pets[index], ...pet };
    },
    addEmotionRecord: (state, action: PayloadAction<{ index: number; record: EmotionRecord }>) => {
      const { index, record } = action.payload;
      state.pets[index].emotionHistory.unshift(record);
    },
    clearEmotionHistory: (state, action: PayloadAction<number>) => {
      state.pets[action.payload].emotionHistory = [];
    },
    addPet: (state, action: PayloadAction<Pet>) => {
      state.pets.push(action.payload);
    },
    removePet: (state, action: PayloadAction<number>) => {
      state.pets.splice(action.payload, 1);
    },
  },
});

export const { updatePetInfo, addEmotionRecord, clearEmotionHistory, addPet, removePet } = petSlice.actions;

export default petSlice.reducer;

================
File: src/utils/emotionUtils.ts
================
export const getEmotionEmoji = (emotion: string): string => {
    const emotionEmojiMap: { [key: string]: string } = {
      "Content": "üò∫",
      "Happy": "üò∏",
      "Curious": "üê±",
      "Affectionate": "üòΩ",
      "Scared": "üôÄ",
      "Aggressive": "üòæ",
      "Annoyed": "üòº",
      "Anxious": "üòø",
      "Sad": "üòø",
      "Bored": "üêà",
      "Sleepy": "üò¥"
    };
    return emotionEmojiMap[emotion] || 'üê±';
  };

================
File:  tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: ['./src/**/*.{js,ts,jsx,tsx}', './app/**/*.{js,ts,jsx,tsx}'],
    theme: {
      extend: {},
    },
    plugins: [],
  };

================
File: .eslintignore
================
node_modules
out

================
File: .eslintrc
================
{
  "settings": {
    "import/resolver": {
      "babel-module": {}
    }
  },
  "extends": ["airbnb-base", "plugin:prettier/recommended"],
  "rules": {
    "prettier/prettier": [
      "error",
      {
        "singleQuote": true,
        "endOfLine": "auto"
      }
    ]
  },
  "overrides": [
    // Configuration for TypeScript files
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "plugins": [
        "@typescript-eslint",
        "unused-imports",
        "tailwindcss",
        "simple-import-sort"
      ],
      "extends": [
        "plugin:tailwindcss/recommended",
        "airbnb",
        "airbnb-typescript",
        "airbnb/hooks",
        "plugin:react/jsx-runtime",
        "plugin:prettier/recommended"
      ],
      "parserOptions": {
        "project": "./tsconfig.json"
      },
      "rules": {
        "prettier/prettier": [
          "error",
          {
            "singleQuote": true,
            "endOfLine": "auto"
          }
        ],
        "import/extensions": [
          "error",
          "ignorePackages",
          {
            "js": "never",
            "jsx": "never",
            "ts": "never",
            "tsx": "never",
            "": "never"
          }
        ], // Avoid missing file extension errors when using '@/' alias
        "react/function-component-definition": "off", // Disable Airbnb's specific function type
        "react/destructuring-assignment": "off", // Vscode doesn't support automatically destructuring, it's a pain to add a new variable
        "react/require-default-props": "off", // Allow non-defined react props as undefined
        "react/jsx-props-no-spreading": "off", // _app.tsx uses spread operator and also, react-hook-form
        "@typescript-eslint/comma-dangle": "off", // Avoid conflict rule between Eslint and Prettier
        "@typescript-eslint/consistent-type-imports": "error", // Ensure `import type` is used when it's necessary
        "no-restricted-syntax": [
          "error",
          "ForInStatement",
          "LabeledStatement",
          "WithStatement"
        ], // Overrides Airbnb configuration and enable no-restricted-syntax
        "import/prefer-default-export": "off", // Named export is easier to refactor automatically
        "simple-import-sort/imports": "error", // Import configuration for `eslint-plugin-simple-import-sort`
        "simple-import-sort/exports": "error", // Export configuration for `eslint-plugin-simple-import-sort`
        "@typescript-eslint/no-unused-vars": "off",
        "unused-imports/no-unused-imports": "error",
        "unused-imports/no-unused-vars": [
          "error",
          { "argsIgnorePattern": "^_" }
        ]
      }
    },
    // Configuration for testing
    {
      "files": ["**/*.test.ts", "**/*.test.tsx"],
      "plugins": ["jest", "jest-formatting", "testing-library"],
      "extends": [
        "plugin:jest/recommended",
        "plugin:jest-formatting/recommended",
        "plugin:testing-library/react"
      ]
    },
    // Configuration for e2e testing
    {
      "files": ["e2e/**/*.ts"],
      "plugins": ["jest", "jest-formatting", "detox"],
      "extends": [
        "plugin:jest/recommended",
        "plugin:jest-formatting/recommended"
      ],
      "parserOptions": {
        "project": "./e2e/tsconfig.json"
      },
      "rules": {
        "import/no-extraneous-dependencies": [
          "error",
          {
            "devDependencies": true
          }
        ]
      }
    }
  ]
}

================
File: .gitignore
================
# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# expo
.expo/
android
ios
index.js

# production
dist/
web-build/

# debug
npm-debug.log*
pnpm-debug.log*
yarn-debug.log*
yarn-error.log*
.vscode/.react

# misc
*.jks
*.p8
*.p12
*.key
*.mobileprovision
*.orig.*
*.pem
Thumbs.db

# macOS
.DS_Store

# local env files
.env*.local

# Temporary files created by Metro to check the health of the file watcher
.metro-health-check*
# @generated expo-cli sync-2b81b286409207a5da26e14c78851eb30d8ccbdb
# The following patterns were generated by expo-cli

expo-env.d.ts
# @end expo-cli

================
File: app.json
================
{
  "expo": {
    "name": "emoticat",
    "slug": "emoticat",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "myapp",
    "userInterfaceStyle": "automatic",
    "splash": {
      "image": "./assets/images/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#060606"
    },
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.apalume.emoticat"
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/icon.png",
        "backgroundColor": "#060606"
      }
    },
     "package": "com.apalume.emoticat",
    "web": {
      "favicon": "./assets/favicon.png",
      "bundler": "metro"
    },
    "plugins": [
      "expo-router"
    ],
    "experiments": {
      "typedRoutes": true
    }
  }
}

================
File: babel.config.js
================
module.exports = function(api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
    plugins: [
      [
        'module-resolver',
        {
          root: ['./'],
          alias: {
            '@': './',
            '@assets': './assets',
          },
        },
      ],
      "nativewind/babel",
    ],
  };
};

================
File: declarations.d.ts
================
declare module '*.svg' {
  import React from 'react';
  import { SvgProps } from 'react-native-svg';
  const content: React.FC<SvgProps>;
  export default content;
}

================
File: eslint.config.mjs
================
import globals from "globals";
import pluginJs from "@eslint/js";
import tseslint from "typescript-eslint";
import pluginReact from "eslint-plugin-react";


export default [
  {files: ["**/*.{js,mjs,cjs,ts,jsx,tsx}"]},
  {languageOptions: { globals: globals.browser }},
  pluginJs.configs.recommended,
  ...tseslint.configs.recommended,
  pluginReact.configs.flat.recommended,
];

================
File: main.tsx
================
import 'expo-router/entry';

================
File: metro.config.js
================
const { getDefaultConfig } = require('expo/metro-config');

module.exports = (() => {
  const config = getDefaultConfig(__dirname);

  const { transformer, resolver } = config;

  config.transformer = {
    ...transformer,
    babelTransformerPath: require.resolve('react-native-svg-transformer'),
  };
  config.resolver = {
    ...resolver,
    assetExts: resolver.assetExts.filter((ext) => ext !== 'svg'),
    sourceExts: [...resolver.sourceExts, 'svg'],
  };

  return config;
})();

================
File: package.json
================
{
  "name": "emoticat",
  "main": "main.tsx",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start --tunnel",
    "reset-project": "node ./scripts/reset-project.js",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web",
    "test": "jest --watchAll",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix"
  },
  "jest": {
    "preset": "jest-expo"
  },
  "dependencies": {
    "@expo/ngrok": "^4.1.3",
    "@expo/vector-icons": "^14.0.2",
    "@react-native-community/datetimepicker": "8.0.1",
    "@react-navigation/native": "^6.0.2",
    "@reduxjs/toolkit": "^2.2.7",
    "expo": "~51.0.28",
    "expo-constants": "~16.0.2",
    "expo-font": "~12.0.10",
    "expo-image-manipulator": "~12.0.5",
    "expo-image-picker": "~15.0.7",
    "expo-linking": "~6.3.1",
    "expo-router": "~3.5.23",
    "expo-status-bar": "~1.12.1",
    "expo-system-ui": "~3.0.7",
    "expo-web-browser": "~13.0.3",
    "nativewind": "^2.0.11",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-native": "^0.75.3",
    "react-native-gesture-handler": "~2.16.1",
    "react-native-reanimated": "~3.10.1",
    "react-native-safe-area-context": "4.10.5",
    "react-native-screens": "3.31.1",
    "react-native-svg": "15.2.0",
    "react-native-web": "~0.19.10",
    "react-redux": "^9.1.2",
    "redux-thunk": "^3.1.0"
  },
  "devDependencies": {
    "@babel/core": "^7.24.0",
    "@babel/eslint-parser": "^7.25.1",
    "@eslint/js": "^9.10.0",
    "@types/jest": "^29.5.12",
    "@types/react": "~18.2.79",
    "@types/react-test-renderer": "^18.0.7",
    "@typescript-eslint/eslint-plugin": "^8.5.0",
    "@typescript-eslint/parser": "^8.5.0",
    "babel-plugin-module-resolver": "^5.0.2",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.36.1",
    "eslint-plugin-react-native": "^4.1.0",
    "globals": "^15.9.0",
    "install": "^0.13.0",
    "jest": "^29.4.0",
    "jest-expo": "^51.0.0",
    "npm": "^10.8.3",
    "react-native-svg": "^15.6.0",
    "react-native-svg-transformer": "^1.5.0",
    "react-test-renderer": "18.2.0",
    "tailwindcss": "^3.3.2",
    "typescript": "~5.3.3",
    "typescript-eslint": "^8.5.0"
  },
  "private": true
}

================
File: README.md
================
hello world

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./src/**/*.{js,ts,jsx,tsx}', './app/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": [
      "es6"
    ],
    "typeRoots": ["./types"],
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "removeComments": true,
    "preserveConstEnums": true,
    "strict": true,
    "alwaysStrict": true,
    "strictNullChecks": true,
    "noUncheckedIndexedAccess": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "allowUnreachableCode": false,
    "noFallthroughCasesInSwitch": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "allowJs": false,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "jsx": "react-native",
    "noEmit": true,
    "isolatedModules": true,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "src/*"
      ],
      "@assets/*": [
        "assets/*"
      ]
    }
  },
  "exclude": [
    "./node_modules/**/*",
    "e2e/**/*.ts"
  ],
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts"
  ],
  "extends": "expo/tsconfig.base"
}
