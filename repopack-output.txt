================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-09-15T01:08:36.582Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
app/
  _layout.tsx
  +html.tsx
  +not-found.tsx
  index.tsx
assets/
  fonts/
    SpaceMono-Regular.ttf
  icons/
    apple.svg
    cat-face.png
    cat-face.svg
    google.svg
  images/
    android-chrome-192x192.png
    android-chrome-512x512.png
    apple-touch-icon.png
    favicon.ico
    favicon.png
    icon.png
    splash.png
constants/
  Colors.ts
hooks/
  useColorScheme.ts
  useColorScheme.web.ts
  useThemeColor.ts
src/
  templates/
    Welcome.tsx
 tailwind.config.js
.eslintignore
.gitignore
app.json
babel.config.js
declarations.d.ts
eslint.config.mjs
Main.tsx
metro.module.js
package.json
README.md
tailwind.config.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/_layout.tsx
================
import { Stack } from 'expo-router';
import { NativeWindStyleSheet } from 'nativewind';

NativeWindStyleSheet.setOutput({
  default: 'native',
});

export default function Layout() {
  return <Stack />;
}

================
File: app/+html.tsx
================
import { ScrollViewStyleReset } from 'expo-router/html';
import { type PropsWithChildren } from 'react';

/**
 * This file is web-only and used to configure the root HTML for every web page during static rendering.
 * The contents of this function only run in Node.js environments and do not have access to the DOM or browser APIs.
 */
export default function Root({ children }: PropsWithChildren) {
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />

        {/*
          Disable body scrolling on web. This makes ScrollView components work closer to how they do on native.
          However, body scrolling is often nice to have for mobile web. If you want to enable it, remove this line.
        */}
        <ScrollViewStyleReset />

        {/* Using raw CSS styles as an escape-hatch to ensure the background color never flickers in dark-mode. */}
        <style dangerouslySetInnerHTML={{ __html: responsiveBackground }} />
        {/* Add any additional <head> elements that you want globally available on web... */}
      </head>
      <body>{children}</body>
    </html>
  );
}

const responsiveBackground = `
body {
  background-color: #fff;
}
@media (prefers-color-scheme: dark) {
  body {
    background-color: #000;
  }
}`;

================
File: app/+not-found.tsx
================
import { Link, Stack } from 'expo-router';
import { StyleSheet } from 'react-native';

import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';

export default function NotFoundScreen() {
  return (
    <>
      <Stack.Screen options={{ title: 'Oops!' }} />
      <ThemedView style={styles.container}>
        <ThemedText type="title">This screen doesn't exist.</ThemedText>
        <Link href="/" style={styles.link}>
          <ThemedText type="link">Go to home screen!</ThemedText>
        </Link>
      </ThemedView>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  link: {
    marginTop: 15,
    paddingVertical: 15,
  },
});

================
File: app/index.tsx
================
import React from 'react';
import { Stack } from 'expo-router';
import { Welcome } from '@/src/templates/Welcome';

const Home = () => (
  <>
    <Stack.Screen
      options={{
        headerShown: false,
      }}
    />
    <Welcome />
  </>
);

export default Home;

================
File: assets/icons/apple.svg
================
<svg width="20" height="24" viewBox="0 0 20 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M19.2807 18.424C18.9329 19.2275 18.5211 19.9672 18.0441 20.6472C17.3939 21.5743 16.8615 22.216 16.4512 22.5724C15.8152 23.1573 15.1337 23.4568 14.404 23.4739C13.8801 23.4739 13.2483 23.3248 12.5129 23.0224C11.7751 22.7214 11.097 22.5724 10.4771 22.5724C9.82683 22.5724 9.12947 22.7214 8.38355 23.0224C7.6365 23.3248 7.03469 23.4824 6.57456 23.498C5.87478 23.5278 5.17728 23.2198 4.48105 22.5724C4.03669 22.1848 3.48087 21.5204 2.81503 20.5791C2.10063 19.5739 1.51329 18.4084 1.05317 17.0795C0.560384 15.6442 0.313354 14.2543 0.313354 12.9087C0.313354 11.3673 0.646419 10.0379 1.31354 8.92385C1.83784 8.02901 2.53534 7.32313 3.40832 6.80494C4.2813 6.28674 5.22456 6.02268 6.24036 6.00578C6.79618 6.00578 7.52506 6.17771 8.43083 6.5156C9.33405 6.85463 9.914 7.02655 10.1683 7.02655C10.3584 7.02655 11.0026 6.82552 12.0948 6.42474C13.1277 6.05306 13.9994 5.89916 14.7135 5.95978C16.6485 6.11595 18.1023 6.87876 19.0691 8.25304C17.3385 9.30164 16.4824 10.7703 16.4995 12.6544C16.5151 14.122 17.0475 15.3432 18.0938 16.3129C18.568 16.7629 19.0975 17.1107 19.6867 17.3578C19.5589 17.7283 19.4241 18.0832 19.2807 18.424ZM14.8427 0.960138C14.8427 2.1104 14.4224 3.1844 13.5848 4.17848C12.574 5.36024 11.3513 6.04312 10.0254 5.93537C10.0086 5.79737 9.99876 5.65213 9.99876 5.49952C9.99876 4.39527 10.4795 3.2135 11.3331 2.24725C11.7593 1.75801 12.3014 1.35123 12.9587 1.02672C13.6146 0.70706 14.235 0.53028 14.8185 0.500008C14.8356 0.65378 14.8427 0.807561 14.8427 0.960123V0.960138Z" fill="white"/>
</svg>

================
File: assets/icons/cat-face.svg
================
<svg width="69" height="32" viewBox="0 0 69 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M22.5 5C22.5 7.20914 20.7091 9 18.5 9C16.2909 9 14.5 7.20914 14.5 5C14.5 2.79086 16.2909 1 18.5 1C20.7091 1 22.5 2.79086 22.5 5Z" fill="black"/>
<path d="M53.5 5C53.5 7.20914 51.7091 9 49.5 9C47.2909 9 45.5 7.20914 45.5 5C45.5 2.79086 47.2909 1 49.5 1C51.7091 1 53.5 2.79086 53.5 5Z" fill="black"/>
<path d="M35.2559 22.1271C34.8572 22.5876 34.1428 22.5876 33.7441 22.1271L30.7368 18.6547C30.1759 18.007 30.636 17 31.4928 17H37.5073C38.364 17 38.8241 18.007 38.2632 18.6547L35.2559 22.1271Z" fill="black"/>
<path d="M51.5 19H67.5M51.5 31H67.5M1.5 19H17.5M1.5 31H17.5M34.4886 22C34.8912 29.5918 24.5 29.7179 24.5 23.8523M34.5125 22C34.0697 29.5918 45.5 29.7179 45.5 23.8523M22.5 5C22.5 7.20914 20.7091 9 18.5 9C16.2909 9 14.5 7.20914 14.5 5C14.5 2.79086 16.2909 1 18.5 1C20.7091 1 22.5 2.79086 22.5 5ZM53.5 5C53.5 7.20914 51.7091 9 49.5 9C47.2909 9 45.5 7.20914 45.5 5C45.5 2.79086 47.2909 1 49.5 1C51.7091 1 53.5 2.79086 53.5 5ZM37.5073 17H31.4928C30.636 17 30.1759 18.007 30.7368 18.6547L33.7441 22.1271C34.1428 22.5876 34.8572 22.5876 35.2559 22.1271L38.2632 18.6547C38.8241 18.007 38.364 17 37.5073 17Z" stroke="black" stroke-width="2" stroke-linecap="round"/>
</svg>

================
File: assets/icons/google.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M23.04 12.2614C23.04 11.4459 22.9668 10.6618 22.8309 9.90909H12V14.3575H18.1891C17.9225 15.795 17.1123 17.013 15.8943 17.8284V20.7139H19.6109C21.7855 18.7118 23.04 15.7636 23.04 12.2614Z" fill="#4285F4"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M12 23.4998C15.105 23.4998 17.7081 22.4701 19.6109 20.7137L15.8943 17.8282C14.8645 18.5182 13.5472 18.926 12 18.926C9.00474 18.926 6.46951 16.903 5.56519 14.1848H1.72314V17.1644C3.61542 20.9228 7.50451 23.4998 12 23.4998Z" fill="#34A853"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M5.56523 14.1851C5.33523 13.4951 5.20455 12.758 5.20455 12.0001C5.20455 11.2421 5.33523 10.5051 5.56523 9.81506V6.83552H1.72318C0.944318 8.38802 0.5 10.1444 0.5 12.0001C0.5 13.8557 0.944318 15.6121 1.72318 17.1646L5.56523 14.1851Z" fill="#FBBC05"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M12 5.07386C13.6884 5.07386 15.2043 5.65409 16.3961 6.79364L19.6945 3.49523C17.7029 1.63955 15.0997 0.5 12 0.5C7.50451 0.5 3.61542 3.07705 1.72314 6.83545L5.56519 9.815C6.46951 7.09682 9.00474 5.07386 12 5.07386Z" fill="#EA4335"/>
</svg>

================
File: constants/Colors.ts
================
/**
 * Below are the colors that are used in the app. The colors are defined in the light and dark mode.
 * There are many other ways to style your app. For example, [Nativewind](https://www.nativewind.dev/), [Tamagui](https://tamagui.dev/), [unistyles](https://reactnativeunistyles.vercel.app), etc.
 */

const tintColorLight = '#0a7ea4';
const tintColorDark = '#fff';

export const Colors = {
  light: {
    text: '#11181C',
    background: '#fff',
    tint: tintColorLight,
    icon: '#687076',
    tabIconDefault: '#687076',
    tabIconSelected: tintColorLight,
  },
  dark: {
    text: '#ECEDEE',
    background: '#151718',
    tint: tintColorDark,
    icon: '#9BA1A6',
    tabIconDefault: '#9BA1A6',
    tabIconSelected: tintColorDark,
  },
};

================
File: hooks/useColorScheme.ts
================
export { useColorScheme } from 'react-native';

================
File: hooks/useColorScheme.web.ts
================
// NOTE: The default React Native styling doesn't support server rendering.
// Server rendered styles should not change between the first render of the HTML
// and the first render on the client. Typically, web developers will use CSS media queries
// to render different styles on the client and server, these aren't directly supported in React Native
// but can be achieved using a styling library like Nativewind.
export function useColorScheme() {
  return 'light';
}

================
File: hooks/useThemeColor.ts
================
/**
 * Learn more about light and dark modes:
 * https://docs.expo.dev/guides/color-schemes/
 */

import { useColorScheme } from 'react-native';

import { Colors } from '@/constants/Colors';

export function useThemeColor(
  props: { light?: string; dark?: string },
  colorName: keyof typeof Colors.light & keyof typeof Colors.dark
) {
  const theme = useColorScheme() ?? 'light';
  const colorFromProps = props[theme];

  if (colorFromProps) {
    return colorFromProps;
  } else {
    return Colors[theme][colorName];
  }
}

================
File: src/templates/Welcome.tsx
================
import React from 'react';
import { StatusBar } from 'expo-status-bar';
import { Text, View, Image, StyleSheet } from 'react-native';
import GoogleIcon from '@assets/icons/google.svg';

const Welcome = () => (
  <View style={styles.container} className={`flex-1 justify-center items-center`}>
    <View className={`p-4 flex flex-row items-center gap-2`}>
        <Image 
          source={require('@assets/icons/cat-face.png')} 
          style={styles.image}
        />  
        <Text style={styles.title}>EmotiCat</Text>
    </View>
    <View className={`flex items-center justify-center`}>
      <View>
        <View className={`bg-[#383838] flex flex-row gap-2 items-center w-full justify-center p-4`} style={styles.button}>
        <GoogleIcon width={24} height={24} />
        <Text style={styles.text}>Continue with Google</Text>
        </View>
      </View>
      
      <Text style={styles.text}>OR</Text>
    </View>
    <StatusBar style="auto" />
  </View>
);

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#060606',
    color: '#FFF',
  },
  title: {
    color: '#FFF',
    fontSize: 32,
    fontStyle: 'normal',
    fontWeight: '700',
    lineHeight: 35,
  },
  image: {
    width: 66,
    height: 62,
  },
  icon: {
    width: 24,
    height: 24,
  },
  text: {
    color: '#FFF',
  },
  button: {
    borderRadius: 32,
  }
});

export { Welcome };

================
File:  tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: ['./src/**/*.{js,ts,jsx,tsx}', './app/**/*.{js,ts,jsx,tsx}'],
    theme: {
      extend: {},
    },
    plugins: [],
  };

================
File: .eslintignore
================
node_modules
out

================
File: .gitignore
================
# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# expo
.expo/
android
ios
index.js

# production
dist/
web-build/

# debug
npm-debug.log*
pnpm-debug.log*
yarn-debug.log*
yarn-error.log*
.vscode/.react

# misc
*.jks
*.p8
*.p12
*.key
*.mobileprovision
*.orig.*
*.pem
Thumbs.db

# macOS
.DS_Store

# local env files
.env*.local

# Temporary files created by Metro to check the health of the file watcher
.metro-health-check*
# @generated expo-cli sync-2b81b286409207a5da26e14c78851eb30d8ccbdb
# The following patterns were generated by expo-cli

expo-env.d.ts
# @end expo-cli

================
File: app.json
================
{
  "expo": {
    "name": "emoticat",
    "slug": "emoticat",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "myapp",
    "userInterfaceStyle": "automatic",
    "splash": {
      "image": "./assets/images/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#060606"
    },
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.apalume.emoticat"
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/icon.png",
        "backgroundColor": "#060606"
      }
    },
     "package": "com.apalume.emoticat",
    "web": {
      "favicon": "./assets/favicon.png",
      "bundler": "metro"
    },
    "plugins": [
      "expo-router"
    ],
    "experiments": {
      "typedRoutes": true
    }
  }
}

================
File: babel.config.js
================
module.exports = function(api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
    plugins: [
      [
        'module-resolver',
        {
          root: ['./'],
          alias: {
            '@': './',
            '@assets': './assets',
          },
        },
      ],
    "nativewind/babel",
    "react-native-svg-transformer",
    ],
  };
};

================
File: declarations.d.ts
================
declare module '*.svg' {
    import React from 'react';
    import { SvgProps } from 'react-native-svg';
    const content: React.FC<SvgProps>;
    export default content;
  }

================
File: eslint.config.mjs
================
import globals from "globals";
import pluginJs from "@eslint/js";
import tseslint from "typescript-eslint";
import pluginReact from "eslint-plugin-react";


export default [
  {files: ["**/*.{js,mjs,cjs,ts,jsx,tsx}"]},
  {languageOptions: { globals: globals.browser }},
  pluginJs.configs.recommended,
  ...tseslint.configs.recommended,
  pluginReact.configs.flat.recommended,
];

================
File: Main.tsx
================
import 'expo-router/entry';

================
File: metro.module.js
================
const { getDefaultConfig } = require("expo/metro-config");

module.exports = (() => {
  const config = getDefaultConfig(__dirname);

  const { transformer, resolver } = config;

  config.transformer = {
    ...transformer,
    babelTransformerPath: require.resolve("react-native-svg-transformer/expo")
  };
  config.resolver = {
    ...resolver,
    assetExts: resolver.assetExts.filter((ext) => ext !== "svg"),
    sourceExts: [...resolver.sourceExts, "svg"]
  };

  return config;
})();

================
File: package.json
================
{
  "name": "emoticat",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start --tunnel",
    "reset-project": "node ./scripts/reset-project.js",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web",
    "test": "jest --watchAll",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix"
  },
  "jest": {
    "preset": "jest-expo"
  },
  "dependencies": {
    "@expo/ngrok": "^4.1.3",
    "@expo/vector-icons": "^14.0.2",
    "@react-navigation/native": "^6.0.2",
    "expo": "~51.0.28",
    "expo-constants": "~16.0.2",
    "expo-font": "~12.0.10",
    "expo-linking": "~6.3.1",
    "expo-router": "~3.5.23",
    "expo-status-bar": "~1.12.1",
    "expo-system-ui": "~3.0.7",
    "expo-web-browser": "~13.0.3",
    "nativewind": "^2.0.11",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-native": "^0.75.3",
    "react-native-gesture-handler": "~2.16.1",
    "react-native-reanimated": "~3.10.1",
    "react-native-safe-area-context": "4.10.5",
    "react-native-screens": "3.31.1",
    "react-native-web": "~0.19.10"
  },
  "devDependencies": {
    "@babel/core": "^7.24.0",
    "@babel/eslint-parser": "^7.25.1",
    "@eslint/js": "^9.10.0",
    "@types/jest": "^29.5.12",
    "@types/react": "~18.2.79",
    "@types/react-test-renderer": "^18.0.7",
    "@typescript-eslint/eslint-plugin": "^8.5.0",
    "@typescript-eslint/parser": "^8.5.0",
    "babel-plugin-module-resolver": "^5.0.2",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.36.1",
    "eslint-plugin-react-native": "^4.1.0",
    "globals": "^15.9.0",
    "install": "^0.13.0",
    "jest": "^29.4.0",
    "jest-expo": "^51.0.0",
    "npm": "^10.8.3",
    "react-native-svg": "^15.6.0",
    "react-native-svg-transformer": "^1.5.0",
    "react-test-renderer": "18.2.0",
    "tailwindcss": "^3.3.2",
    "typescript": "~5.3.3",
    "typescript-eslint": "^8.5.0"
  },
  "private": true
}

================
File: README.md
================
hello world

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./src/**/*.{js,ts,jsx,tsx}', './app/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": [
      "es6"
    ],
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "removeComments": true,
    "preserveConstEnums": true,
    "strict": true,
    "alwaysStrict": true,
    "strictNullChecks": true,
    "noUncheckedIndexedAccess": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "allowUnreachableCode": false,
    "noFallthroughCasesInSwitch": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "allowJs": false,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "jsx": "react-native",
    "noEmit": true,
    "isolatedModules": true,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "src/*"
      ],
      "@assets/*": ["assets/*"]
    }
  },
  "exclude": [
    "./node_modules/**/*",
    "e2e/**/*.ts"
  ],
  "extends": "expo/tsconfig.base",
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts"
  ]
}
